#!/usr/local/bin/aoi
<?bas

cmdtxt = ""

astxt = ""
astxt_tmp = ""

jstxt = ""
jstmp = ""

javatxt = ""
javatmp = ""


readFuncFile("SystemFunction.java")


#--- format
javatxt = <qq>
// generated by sysfunc2code.aoi

package aoivm.java;

class SysFuncList \{
  public static int args[] = \{
    {args}
  \};
  public static void call(AFunctionArg arg, int no) \{
    switch (no) \{
{javatxt}
    \}
  \}
\}
/*
{javatmp}
*/
</qq>
args = ""
astxt = <qq>
// generated by sysfunc2code.aoi
class SysFuncList \{
  function SysFuncList() \{\} // constructor
  static function init(func_tbl:Array, funcarg_tbl:Array) \{
{astxt}
  \}
\}


//-------------------------------------------------
/*
{astxt_tmp}
*/
</qq>

jstxt = <qq>
// System Function
function SysFuncList() \{
  this.func_tbl    = new Array();
  this.funcarg_tbl = new Array();
  var chk = function (name, a) \{
    if (!a) \{ console.log("Link.error: SystemApi." + name); \}
    return a;
  \};
{jstxt}
\};
/*
{jstmp}
*/
</qq>

#-------------------------------------
print jstxt
print "\n----\n"
print cmdtxt
print "-----------------\n"
print astxt
print "\nok.\n"


#-------------------------------------
file_save("SysFuncList.as",astxt)
file_save("command.txt",cmdtxt)
file_save("SysFuncList.java",javatxt)
#-------------------------------------

function readFuncFile(fname)
  src = file_load(fname)
  str_getToken!(src, "//<function>")
  def = str_getToken!(src, "//</function>")
  a_def = str_split(def, "\n")
  dim cnt = 0
  for ss in a_def
    ss = str_trim(ss)
    if (str_mid(ss,1,2) = "//") then
      str_delete!(ss, 1, 3)
      cmdtxt = cmdtxt & "+" & ss & "\n"
      cmdtxt = cmdtxt & "-" & ss & "\n"
      continue
    end
    str_getToken!(ss,"(")
    fno = cint(str_getToken!(ss,","))
    str_getToken!(ss,'"')
    fid = str_getToken!(ss,'"')
    str_getToken!(ss,'"')
    name = str_getToken!(ss,'"')
    str_getToken!(ss,'"')
    arg = str_getToken!(ss,'"')
    str_getToken!(ss,',')
    argcount = cint(str_trim(str_getToken!(ss,',')),-1)
    if argcount = -1 then
      throw("get arg error")
    end if
    str_getToken!(ss,'"')
    desc = str_getToken!(ss,'"')
    //
    if name = "" then continue
    listfid[fno] = fid
    listdef[fno] = "*{name}({arg}) .. {desc}"
    listarg[fno] = argcount
    listname[fno] = name
    listarg[fno] = argcount
    listdesc[fno] = desc
    cnt = cnt + 1
    cmdtxt = cmdtxt & <qq>|{name},"{arg}","{desc}",{fno},{fid},命令\n</qq>
  end
  print "*** {fname} = {cnt}\n"
  for i = 0 to array_count(listfid)
    fid = listfid[i]
    def = listdef[i]
    arg = listarg[i]
    if fid = "" then
      args = args & <qq>0,</qq>
      continue
    end
    // args
    args = args & <qq>{arg},</qq>
    // as
    astxt = astxt & <qq>    func_tbl[{i}] = SystemApi.{fid};\n</qq>
    astxt = astxt & <qq>    funcarg_tbl[{i}] = {arg};\n</qq>
    astxt_tmp = astxt_tmp & <qq>    // {def}
    static function {fid}(fa:FunctionArg):Void \{
    \}\n</qq>
    // js
    jstxt = jstxt & <qq>  func_tbl[{i}] = chk("{fid}",SystemApi.{fid});\n</qq>
    jstxt = jstxt & <qq>  funcarg_tbl[{i}] = {arg};\n</qq>
    jstmp = jstmp & <qq>// {def}
SystemApi.prototype.{fid} = function (arg) \{
  //todo: SystemApi.{fid}
\}\n</qq>
    // java
    javatxt = javatxt & <qq>    case {i}: SysFunc.api_{fid}(arg); break;\n</qq>
    javatmp = javatmp & <qq>  \n  // {def}\n  public static void api_{fid}(AFunctionArg arg) \{\n   //todo\n  \}\n</qq>
  next
end

?>
