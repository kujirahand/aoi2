// created by jay 1.1.0 (c) 2002-2006 ats@cs.rit.edu
// skeleton Java 1.1.0 (c) 2002-2006 ats@cs.rit.edu

					// line 2 "AOIParser.jay"
// generated by AOIParser.jay

package com.aoikujira.aoi2.compiler.lang.aoi;

import java.io.*;
import com.aoikujira.aoi2.compiler.*;

public class AOIParser extends Parser {
    private AOINodeCreator nc;
					// line 15 "-"
  // %token constants
  public static final int EQ = 257;
  public static final int EQEQ = 258;
  public static final int GT = 259;
  public static final int GTEQ = 260;
  public static final int LT = 261;
  public static final int LTEQ = 262;
  public static final int NOT = 263;
  public static final int NOTEQ = 264;
  public static final int OR = 265;
  public static final int AND = 266;
  public static final int SHR = 267;
  public static final int SHL = 268;
  public static final int INT = 269;
  public static final int NUM = 270;
  public static final int STR = 271;
  public static final int WORD = 272;
  public static final int FUNC = 273;
  public static final int FUNCARG = 274;
  public static final int EOL = 275;
  public static final int ACCESSOR = 276;
  public static final int IF = 277;
  public static final int ELSE = 278;
  public static final int FOR = 279;
  public static final int REPEAT = 280;
  public static final int WHILE = 281;
  public static final int RETURN = 282;
  public static final int GET_VARNAME = 283;
  public static final int LET = 284;
  public static final int AS = 285;
  public static final int LOCAL = 286;
  public static final int BREAK = 287;
  public static final int CONTINUE = 288;
  public static final int CONST = 289;
  public static final int THEN = 290;
  public static final int BEGIN = 291;
  public static final int END = 292;
  public static final int DEF_ACCESSOR = 293;
  public static final int INCLUDE = 294;
  public static final int FOREACH = 295;
  public static final int UMINUS = 296;
  public static final int yyErrorCode = 256;

  /** number of final state.
    */
  protected static final int yyFinal = 18;

  /** parser tables.
      Order is mandated by <i>jay</i>.
    */
  protected static final short[] yyLhs = {
//yyLhs 119
    -1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,    12,     3,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    28,    28,    28,    28,    29,    13,
    13,    13,    13,    14,    15,    19,    20,    21,    22,    10,
    10,    11,     9,     9,     9,     9,     9,    33,    33,    33,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,    18,    18,    16,    16,    17,    17,     5,
     5,     5,     5,     6,     6,     6,     6,     6,     6,     6,
     6,     7,     7,     7,     7,     8,     8,    23,    23,    23,
    23,    30,    30,    30,    34,    34,    24,    24,    24,    24,
    31,    25,    25,    27,    27,    35,    35,    26,    32,
    }, yyLen = {
//yyLen 119
     2,     1,     1,     2,     3,     2,     2,     2,     2,     2,
     2,     2,     3,     2,     1,     1,     1,     1,     2,     1,
     1,     1,     1,     2,     3,     5,     2,     4,     2,     3,
     5,     4,     6,     3,     3,     5,     5,     5,     5,     2,
     1,     4,     3,     3,     4,     4,     3,     2,     2,     2,
     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     2,     2,     3,
     3,     1,     2,     1,     3,     1,     3,     3,     3,     1,
     1,     2,     2,     1,     1,     1,     1,     5,     5,     2,
     2,     1,     2,     2,     1,     3,     2,     2,     3,     8,
     8,     5,     2,     4,     1,     1,     1,     2,     2,     2,
     3,     3,     1,     1,     1,     0,     1,     0,     1,
    }, yyDefRed = {
//yyDefRed 224
     0,     0,    85,    84,     0,     0,     0,    80,     0,    17,
    19,    20,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     2,     0,     0,    50,     0,    21,    14,    71,    15,
     0,     0,    16,     0,     0,    86,    91,     0,    94,    67,
     0,    23,     0,    72,     0,     0,     0,   104,   105,     0,
     0,     0,     0,   116,    90,     0,    89,     0,    68,     0,
     0,     6,     0,     0,     5,     7,     8,    10,     9,    11,
     0,   113,   114,    13,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    18,     0,     0,     0,     0,     0,     0,
     0,     0,    82,     0,     0,     0,     0,     0,    92,     0,
     3,     0,     0,     0,    97,   112,    28,    93,     0,     0,
     0,     0,     0,     0,     0,    69,    70,     0,     0,     0,
    75,     0,     0,     0,     0,     0,     0,     0,     0,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    57,     0,    43,    96,     0,
    48,    47,    49,     0,     0,   118,    98,     0,     0,     0,
    41,     0,     0,   106,   103,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    12,     0,     0,     0,     0,    95,
     0,     0,     0,   111,     0,     0,     0,   107,   101,   108,
   109,     0,     0,    87,    76,    88,     0,     0,     0,     0,
    31,     0,     0,     0,     0,     0,   110,     0,     0,    33,
     0,    30,     0,    36,    37,    38,    35,     0,     0,     0,
    32,   100,    99,    34,
    }, yyDgoto = {
//yyDgoto 36
    18,    19,    20,    21,    22,    23,    24,    40,    98,    26,
    27,    28,    64,    65,   173,   211,   119,   120,   122,    66,
    67,    68,    69,    29,   165,   104,    30,    73,    31,    32,
    33,   156,    34,   107,    50,    55,
    }, yySindex = {
//yySindex 224
   743,  2374,     0,     0,     0,  -238,   -24,     0,  -231,     0,
     0,     0,  -211,  -200,  2219,  -105,   -93,   245,     0,   286,
    -8,     0,  1162,  2237,     0,   -45,     0,     0,     0,     0,
    -8,  -236,     0,  -232,  -239,     0,     0,   -24,     0,     0,
   -19,     0,  -205,     0,  2254,  2374,   -43,     0,     0,  -210,
    46,  1778,    50,     0,     0,  -163,     0,  2374,     0,  2374,
   743,     0,   500,  2013,     0,     0,     0,     0,     0,     0,
    -8,     0,     0,     0,  2374,  2374,  2374,  2374,  2374,  2374,
  2374,  2374,  2374,     0,  2374,  2374,  2374,  2374,  2374,  2374,
  2374,   -24,     0,  2546,  2219,  2374,  2374,  -177,     0,  -161,
     0,  -153,  -156,   743,     0,     0,     0,     0,  -141,  2546,
  1701,  2546,  2374,  -176,   -30,     0,     0,    61,    62,  -157,
     0,  2546,  -157,   703,   656,  -170,  -162,  -160,  -154,     0,
    60,    60,    60,    60,    60,    60,    60,  2561,  2561,    20,
    20,    40,    40,    40,    20,     0,  2546,     0,     0,  1850,
     0,     0,     0,  2374,  2374,     0,     0,    74,  1003,  2374,
     0,  2546,  -195,     0,     0,   -13,  2374,  2374,   -85,  2289,
   743,  2272,    -8,  -138,     0,   743,   743,   743,   743,     0,
  2546,  2546,  -128,     0,  2546,  -131,  -127,     0,     0,     0,
     0,  2546,  2546,     0,     0,     0,  2546,  1716,   -24,  -210,
     0,  -237,  1910,  1940,  1978,  2044,     0,  -114,  -111,     0,
   743,     0,  -122,     0,     0,     0,     0,  -117,  -116,  2102,
     0,     0,     0,     0,
    }, yyRindex = {
//yyRindex 224
    -7,     0,     0,     0,   457,   349,   -32,     0,   541,     0,
     0,     0,     0,     0,     0,  -159,  2393,     0,     0,     4,
     0,     0,  2306,     0,     0,   801,     0,     0,     0,     0,
     0,    -6,     0,    -7,     0,     0,     0,     0,     0,     0,
   157,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -42,  2306,     0,     0,     0,     0,     0,     0,     0,     0,
    -7,     0,  2085,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   -27,     0,   895,     0,     0,     0,     0,     0,   609,
     0,   -17,     0,    -7,     0,     0,     0,     0,   -10,  2148,
     0,    10,     0,     0,     0,     0,     0,     0,     0,   -81,
     0,  2165,  2356,     0,    -7,     0,     0,     0,     0,     0,
  1122,  1242,  1314,  1402,  1506,  1594,  1666,  1786,  1858,   858,
   962,   -35,    42,    85,  1050,     0,  1349,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    -7,     0,
     0,    11,     0,     0,     0,     0,     0,     0,     0,     0,
    -7,     0,     0,     1,     0,    -7,    -7,    -7,    -7,     0,
    12,    -9,     0,     0,     9,     0,     0,     0,     0,     0,
     0,  -103,   -91,     0,     0,     0,  2200,    -7,    34,   417,
     0,  -119,    -7,    -7,    -7,    -7,     0,     0,     0,     0,
    -7,     0,     0,     0,     0,     0,     0,     0,     0,    -7,
     0,     0,     0,     0,
    }, yyGindex = {
//yyGindex 36
     0,   -25,    36,  1338,  2770,   466,   143,  2551,     0,     0,
    16,     0,     0,   -51,     0,     0,     0,    -5,     0,     0,
     0,     0,     0,     0,     0,     0,   831,     7,     0,     0,
     0,     0,    64,   137,     0,    17,
    }, yyTable = {
//yyTable 2990
    56,    29,    51,    51,     1,    51,    51,    51,    51,    40,
    51,   164,    51,    95,    39,    95,    44,   102,    41,    97,
    54,    97,    78,    51,    51,   102,    45,    40,   188,    51,
    52,   190,    39,    57,    77,   124,   101,   100,    53,    95,
   193,    29,    26,    29,   115,    97,    96,    42,    96,    24,
    27,    72,   117,    22,   210,   106,    51,    88,    51,   103,
    29,    36,    86,   117,   185,    38,   186,    87,    25,    46,
    45,    44,    96,    47,    48,   113,    49,   129,   158,    52,
    52,   108,    52,    52,    52,    52,   114,    52,    51,    52,
    51,   116,    29,   104,   150,   151,   153,    88,    89,   152,
    52,    52,    86,    84,   154,    85,    52,    87,   117,   118,
   147,   189,   115,   115,    90,   155,   159,   162,    53,   166,
   167,   175,    53,    53,    29,    53,    53,    53,    53,   176,
    53,   177,    53,    52,    90,    52,   168,   178,   182,   169,
   201,   206,   207,    53,    53,   197,   208,   217,   218,    53,
   202,   203,   204,   205,    90,    59,   221,   222,   115,   172,
    58,   220,    99,   194,     0,    52,   157,    52,    78,    78,
    53,     0,    78,     0,     0,     0,    53,     0,    53,   200,
    77,    77,    53,     0,    77,   219,   117,   118,     0,     0,
   115,   115,     0,     0,    83,    83,     0,    83,    83,    83,
    83,     0,    83,     0,    83,     0,     0,     0,    53,     0,
    53,     0,    94,     0,   112,   102,    83,     0,   212,     0,
     0,     0,    51,    51,    51,    51,    51,    51,    51,    51,
    51,    51,    43,   102,    51,    51,    51,    51,    51,    51,
    51,    51,   163,    40,    51,    51,    51,    51,    39,   102,
    83,    83,    51,    51,    51,    26,    51,     0,    26,   187,
    51,    51,    24,    27,    29,    24,    27,    71,   117,    22,
    29,    29,    29,    29,    29,    29,    29,    29,    29,   117,
    83,    25,    83,    29,    25,    46,    45,    44,    29,    29,
    29,   104,    29,    29,     0,     0,     0,    29,     0,    52,
    52,    52,    52,    52,    52,    52,    52,    52,    52,   104,
     0,    52,    52,    52,    52,    52,    52,    52,    52,     0,
     0,    52,    52,    52,    52,   104,    14,     0,    13,    52,
    52,    52,     0,    52,     0,     0,    16,    52,    52,     0,
     0,     0,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,     0,     0,    53,    53,    53,    53,    53,    53,
    53,    53,     0,     0,    53,    53,    53,    53,    15,     0,
     0,     0,    53,    53,    53,     0,    53,    16,     0,     0,
    53,    53,     0,     0,     0,     0,    91,    91,     0,    91,
     0,    91,    91,     0,    91,     0,    91,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    91,     0,    15,
     0,     0,     0,    91,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,     0,     0,    83,    83,    83,    83,
    83,    83,    83,    83,     0,     0,    83,    83,    83,    83,
    91,     0,     0,    91,    83,    83,    83,     0,    83,     0,
     0,     0,    83,    83,    94,    94,     0,    94,     0,    94,
    94,     0,    94,     0,    94,     0,     0,     0,     0,     0,
     0,     0,    91,     0,     0,    94,     0,     0,     0,     0,
     0,    94,     0,     0,     0,    63,     0,     0,     0,     0,
     0,     0,     0,     0,    86,    86,     0,    86,     0,    86,
    86,     0,    86,     0,    86,     0,     0,     0,    94,     0,
   110,    94,     0,     0,     2,     3,    35,    36,     0,     0,
     0,    38,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    88,    89,     0,
    94,     0,    86,    84,     0,    85,     0,    87,    86,     1,
     0,    86,     0,     0,     0,     2,     3,     4,     5,     6,
     7,     0,     8,    59,     0,     0,     0,     0,     9,     0,
     0,     0,     0,    10,    11,    12,     0,    60,    94,    94,
    86,    94,    17,    94,    94,     0,    94,     0,    94,     0,
    63,     0,     0,     0,    90,     0,     0,     0,     0,    94,
     0,     0,     0,     0,     0,    94,    91,    91,    91,    91,
    91,    91,    91,    91,    91,    91,     0,     0,    91,    91,
    91,    91,    91,    91,    63,    91,     0,     0,    91,    91,
    91,    91,    94,     0,     0,    94,     0,     0,     0,     0,
     0,     0,     0,     0,    91,    91,    93,    93,     0,    93,
     0,    93,    93,     0,    93,     0,    93,     0,     0,     0,
     0,     0,     0,    63,    94,     0,     0,    93,    63,    63,
    63,    63,     0,    93,    94,    94,    94,    94,    94,    94,
    94,    94,    94,    94,     0,    63,    94,    94,    94,    94,
    94,    94,     0,    94,     0,     0,    14,     0,    13,    94,
    93,     0,     0,    93,    94,    94,    94,     0,    94,     0,
     0,     0,     0,    94,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,     0,     0,    86,    86,    86,    86,
    86,    86,    93,    86,     0,     0,    86,    86,    86,    86,
    88,    89,     0,    14,     0,   171,    84,    16,    85,     0,
    87,   118,    86,    86,     0,     0,     0,    74,    75,    76,
    77,    78,    79,     0,    80,    81,    82,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    15,
   125,   126,    83,    14,     0,    13,     0,     0,     0,     0,
     0,     0,     0,     0,    16,   127,     0,    90,     0,    94,
    94,    94,    94,    94,    94,    94,    94,    94,     0,     0,
    94,    94,    94,    94,    94,    94,     0,    94,     0,     0,
    94,    94,    94,    94,     0,     0,    15,     0,     0,     0,
     0,     0,     0,     0,    16,     0,    94,    94,    83,    83,
     0,    83,     0,    83,    83,     0,    83,     0,    83,     0,
    70,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   105,     0,    15,    93,    93,    93,
    93,    93,    93,    93,    93,    93,     0,     0,    93,    93,
    93,    93,    93,    93,     0,    93,     0,     0,    93,    93,
    93,    93,     0,     0,     0,    83,    54,     0,    54,    54,
     0,    54,     0,    54,    93,    93,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    54,    54,     0,     1,
     0,     0,    54,     0,    83,     2,     3,     4,     5,     6,
     7,     0,     8,    59,     0,    81,    81,     0,     9,     0,
     0,     0,     0,    10,    11,    12,     0,    60,   174,    54,
     0,    54,    17,     0,     0,    70,     0,     0,     0,     0,
    74,    75,    76,    77,    78,    79,     1,    80,    81,    82,
     0,     0,     2,     3,     4,     5,     6,     7,     0,     8,
     0,    54,     0,    54,     0,     9,    81,     0,     0,    70,
    10,    11,    12,     0,   170,     0,     0,     0,     0,    17,
    55,     0,    55,    55,     0,    55,     1,    55,     0,     0,
     0,     0,     2,     3,     4,     5,     6,     7,    81,     8,
    55,    55,     0,     0,     0,     9,    55,     0,    70,     0,
    10,    11,    12,    70,    70,    70,    70,     0,     0,    17,
     0,     0,     0,    14,     0,    13,     0,     0,     0,     0,
    70,     0,     0,    55,     0,    55,     0,     0,     0,    83,
    83,    83,    83,    83,    83,    83,    83,    83,     0,     0,
    83,    83,    83,    83,    83,    83,     0,    83,     0,     0,
    83,    83,    83,    83,     0,    55,     0,    55,    56,     0,
    56,    56,     0,    56,    16,    56,    83,    83,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    56,    56,
     0,     0,     0,     0,    56,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,     0,    15,    54,    54,    54,
    54,    54,    54,    54,    54,     0,     0,    54,    54,    54,
    54,    56,     0,    56,     0,    54,    54,    54,     0,    54,
     0,     0,     0,    54,    54,     0,     0,     0,    81,     0,
     0,     0,    58,    58,    81,    81,    81,    81,    81,    81,
     0,    81,     0,    56,    81,    56,     0,     0,     0,     0,
    58,    58,     0,     0,     0,     0,    58,     0,     0,     0,
     0,    81,     0,     0,     0,     0,     0,     0,     0,    88,
    89,     0,     0,     0,    86,    84,     0,    85,     0,    87,
     0,     0,     0,    58,     0,    58,     0,     0,     0,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,     0,
     0,    55,    55,    55,    55,    55,    55,    55,    55,     0,
     0,    55,    55,    55,    55,    58,     0,    58,     0,    55,
    55,    55,     0,    55,     0,     0,    90,    55,    55,     0,
     0,     0,     0,     0,     0,     0,     1,     0,     0,     0,
     0,     0,     2,     3,     4,     5,     6,     7,     0,     8,
    59,     0,    63,    63,     0,     9,     0,     0,     0,     0,
    10,    11,    12,     0,    60,   183,     0,     0,     0,    17,
    63,    63,     0,     0,     0,     0,    63,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,     0,     0,    56,
    56,    56,    56,    56,    56,    56,    56,     0,     0,    56,
    56,    56,    56,    63,     0,    63,     0,    56,    56,    56,
     0,    56,     0,     0,     0,    56,    56,     0,     0,     0,
     0,     0,     0,     0,    59,    59,     0,    61,     0,     0,
     0,     0,     0,     0,     0,    63,     0,    63,     0,     0,
     0,     0,    59,    59,     0,     0,     0,     0,    59,    58,
    58,    58,    58,    58,    58,    58,    58,    58,    58,    79,
     0,    58,    58,    58,    58,    58,    58,    58,    58,     0,
     0,    58,    58,    58,    58,    59,     0,    59,    42,    58,
    58,    58,     0,    58,     0,     0,     0,    58,    58,    74,
    75,    76,    77,    78,    79,     0,    80,    81,    82,     0,
     0,     0,     0,     0,     0,     0,     0,    59,     0,    59,
    79,     0,    60,    60,    83,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    60,    60,    61,     0,     0,     0,    60,     0,     0,     0,
     0,     0,    79,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    60,     0,    60,    61,     0,     0,    63,
    63,    63,    63,    63,    63,    63,    63,    63,    63,     0,
     0,    63,    63,    63,    63,    63,    63,    63,    63,     0,
     0,    63,    63,    63,    63,    60,     0,    60,     0,    63,
    63,    63,     0,    63,     0,    61,     0,    63,    63,     0,
    61,    61,    61,    61,     0,     0,    61,    61,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    61,     0,     0,
     0,     0,     0,     0,    61,    61,     0,     0,     0,     0,
    61,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,     0,     0,    59,    59,    59,    59,    59,    59,    59,
    59,     0,     0,    59,    59,    59,    59,    61,     0,    61,
     0,    59,    59,    59,     0,    59,     0,     0,     0,    59,
    59,     0,    79,     0,     0,     0,     0,     0,    79,    79,
    79,    79,    79,    79,    42,    79,     0,     0,     0,    61,
     0,    61,     0,     0,    62,    62,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    79,     0,     0,     0,     0,
     0,     0,    62,    62,     0,     0,     0,     0,    62,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    60,     0,
     0,    60,    60,    60,    60,    60,    60,    60,    60,     0,
     0,    60,    60,    60,    60,    62,     0,    62,     0,    60,
    60,    60,     0,    60,     0,     0,     0,    60,    60,     0,
     0,     0,     0,     0,     0,     0,    64,    64,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    62,     0,    62,
     0,     0,     0,     0,    64,    64,     0,     0,     0,     0,
    64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    14,   160,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    14,    64,    13,    64,
     0,     0,     0,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,     0,     0,    61,    61,    61,    61,    61,
    61,    61,    61,     0,     0,    61,    61,    61,    61,    64,
     0,    64,    16,    61,    61,    61,     0,    61,     0,     0,
     0,    61,    61,     0,     0,     0,     0,    16,     0,     0,
     0,     0,     0,     0,     0,    88,    89,     0,     0,   115,
    86,    84,     0,    85,    15,    87,    65,    65,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    15,
     0,     0,     0,     0,    65,    65,     0,     0,     0,     0,
    65,    62,    62,    62,    62,    62,    62,    62,    62,    62,
    62,     0,     0,    62,    62,    62,    62,    62,    62,    62,
    62,     0,    90,    62,    62,    62,    62,    65,     0,    65,
     0,    62,    62,    62,     0,    62,     0,    88,    89,    62,
    62,     0,    86,    84,     0,    85,     0,    87,    66,    66,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    65,
     0,    65,     0,     0,     0,     0,    66,    66,     0,     0,
     0,     0,    66,    64,    64,    64,    64,    64,    64,    64,
    64,    64,    64,     0,     0,    64,    64,    64,    64,    64,
    64,    64,    64,   179,    90,    64,    64,    64,    64,    66,
    14,    66,    13,    64,    64,    64,     0,    64,     0,     0,
     0,    64,    64,     0,     1,     0,     0,     0,     0,     0,
     2,     3,    35,    36,    37,    92,     0,    38,     0,     1,
    14,    66,    13,    66,     0,     2,     3,     4,     5,     6,
     7,     0,     8,    59,     0,     0,     0,    17,     9,     0,
     0,    16,     0,    10,    11,    12,     0,    60,   209,     0,
     0,     0,    17,     0,     0,     0,     0,     0,    14,     0,
    13,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    16,     0,    15,     0,    74,    75,    76,    77,    78,
    79,     0,    80,    81,    82,     0,     0,     0,     0,    65,
     0,    65,    65,    14,     0,    65,    65,    65,    65,    65,
    65,    65,    65,    15,     0,    65,    65,    65,    65,    16,
     0,     0,     0,    65,    65,    65,     0,    65,     0,     0,
     0,    65,    65,     0,    14,     0,    13,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    15,     0,     0,    16,     0,     0,    74,    75,    76,
    77,    78,    79,     0,    80,    81,    82,     0,     0,     0,
     0,    66,     0,    66,    66,    79,     0,    66,    66,    66,
    66,    66,    66,    66,    66,    16,    15,    66,    66,    66,
    66,     0,    14,     0,    13,    66,    66,    66,     0,    66,
     0,     0,     0,    66,    66,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    15,     0,     0,
     0,     0,     0,     1,     0,     0,    79,     0,     0,     2,
     3,     4,     5,     6,     7,     0,     8,    59,    79,    79,
     0,     0,     9,    16,     0,     0,     0,    10,    11,    12,
     0,    60,   213,     1,     0,    73,    17,     0,    79,     2,
     3,     4,     5,     6,     7,     0,     8,    59,     0,     0,
     0,     0,     9,     0,     0,    15,     0,    10,    11,    12,
     0,    60,   214,     0,     0,     0,    17,     0,     0,    79,
    74,     1,     0,     0,     0,     0,     0,     2,     3,     4,
     5,     6,     7,     0,     8,    59,    73,     0,    73,    14,
     9,     0,     0,     0,     0,    10,    11,    12,     0,    60,
   215,    79,     0,     0,    17,     0,     1,    14,     0,     0,
     0,     0,     2,     3,    35,    36,    91,    92,    73,    38,
     0,    74,   128,    74,    14,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     1,     0,    17,
    16,     0,    14,     2,     3,     4,     5,     6,     7,     0,
     8,    59,     0,    74,     0,     0,     9,     0,    16,    14,
     0,    10,    11,    12,     0,    60,   216,     0,     0,     0,
    17,     0,    15,     0,     0,    16,    79,     0,    79,     0,
     0,     0,     0,     0,    79,    79,    79,    79,    79,    79,
    15,    79,     0,    16,    79,     1,     0,     0,     0,     0,
     0,     2,     3,     4,     5,     6,     7,    15,     8,    59,
    16,    79,   195,     0,     9,     0,     0,     0,     0,    10,
    11,    12,     0,    60,   223,    15,   115,    79,    17,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    79,    15,     0,    14,     0,     0,    79,    79,    79,
    79,    79,    79,     0,    79,     0,     0,     0,    73,    79,
     0,     0,     0,   115,    73,    73,    73,    73,    73,     0,
    73,    73,     0,     0,    79,     0,     0,   115,     0,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    73,     0,    74,     0,    16,     0,     0,     0,    74,
    74,    74,    74,    74,     0,    74,    74,     0,     0,   115,
     0,     0,     1,     0,   115,     0,     0,     0,     2,     3,
    35,    36,     6,     7,     0,    38,    74,    15,     0,     0,
     1,     0,     0,     0,     0,     0,     2,     3,    35,    36,
    91,    92,     0,    38,     0,    17,   115,     1,     0,     0,
     0,     0,     0,     2,     3,    35,    36,    37,     7,     0,
    38,     0,     0,    17,     0,     1,     0,     0,     0,     0,
     0,     2,     3,    35,    36,   198,    48,     0,   199,     0,
    17,    25,     1,     0,     0,     0,     0,     0,     2,     3,
    35,    36,    37,    46,     0,    38,     0,     0,    17,    79,
    25,     0,     0,     0,     0,    79,    79,    79,    79,    79,
    79,     0,    79,    88,    89,    17,     0,     0,    86,    84,
     0,    85,     0,    87,     0,     0,     0,     0,    88,    89,
     0,     0,    79,    86,    84,     0,    85,     0,    87,     0,
     0,    25,     0,     0,     0,     0,     0,     0,     0,   115,
     0,     0,     0,     0,     0,   115,   115,   115,   115,   115,
     0,     0,   115,     0,     0,     0,     0,     1,     0,     0,
    90,     0,     0,     2,     3,    35,    36,    37,     0,     0,
    38,     0,   115,     0,    25,    90,   115,     0,     0,     0,
     0,     0,   115,   115,   115,   115,   115,     0,     0,   115,
    17,     0,     0,     0,    25,    25,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    25,     0,     0,     0,     0,    25,    25,    25,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    25,     0,
     0,     0,     0,    25,    25,    25,    25,     0,     0,     0,
     0,    25,     0,     0,     0,     0,     0,     0,     0,     0,
    25,    39,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    51,     0,     0,     0,     0,    62,
     0,     0,     0,    93,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    74,    75,    76,    77,    78,    79,     0,
    80,    81,    82,     0,   109,   111,     0,     0,    74,    75,
    76,    77,    78,    79,     0,    80,     0,   121,     0,   123,
     0,     0,     0,    93,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
   136,   137,   138,     0,   139,   140,   141,   142,   143,   144,
   145,     0,     0,     0,   146,   148,   149,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    93,     0,   161,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    62,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   180,   181,     0,     0,     0,    62,   184,
     0,     0,     0,     0,     0,     0,   191,   192,     0,   196,
     0,   141,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    62,     0,     0,
     0,     0,    62,    62,    62,    62,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    62,
    }, yyCheck = {
//yyCheck 2990
    93,     0,    37,    38,     0,    40,    41,    42,    43,    41,
    45,    41,    47,    58,    41,    58,    40,    59,   256,    64,
   125,    64,   125,    58,    59,   257,   257,    59,    41,    64,
    14,    44,    59,    16,   125,    60,   272,    30,   275,    58,
   125,    40,    59,    42,   125,    64,    91,   285,    91,    59,
    59,    59,    59,    59,   291,   294,    91,    37,    93,   291,
    59,   272,    42,    59,   259,   276,   261,    47,    59,    59,
    59,    59,    91,   273,   274,   285,   276,    70,   103,    37,
    38,   286,    40,    41,    42,    43,    40,    45,   123,    47,
   125,    41,    91,    59,   271,   272,   257,    37,    38,   276,
    58,    59,    42,    43,   257,    45,    64,    47,   271,   272,
    94,   124,   271,   272,    94,   271,   257,   293,   275,    58,
    58,   291,    37,    38,   123,    40,    41,    42,    43,   291,
    45,   291,    47,    91,    94,    93,   119,   291,    64,   122,
   278,   269,   273,    58,    59,   170,   273,   261,   259,    64,
   175,   176,   177,   178,    94,   277,   273,   273,   277,   123,
    17,   212,    25,   168,    -1,   123,   102,   125,   271,   272,
   275,    -1,   275,    -1,    -1,    -1,    91,    -1,    93,   172,
   271,   272,   275,    -1,   275,   210,   271,   272,    -1,    -1,
   271,   272,    -1,    -1,    37,    38,    -1,    40,    41,    42,
    43,    -1,    45,    -1,    47,    -1,    -1,    -1,   123,    -1,
   125,    -1,   257,    -1,   257,   257,    59,    -1,   201,    -1,
    -1,    -1,   257,   258,   259,   260,   261,   262,   263,   264,
   265,   266,   256,   275,   269,   270,   271,   272,   273,   274,
   275,   276,   272,   275,   279,   280,   281,   282,   275,   291,
    93,    94,   287,   288,   289,   272,   291,    -1,   275,   272,
   295,   296,   272,   272,   263,   275,   275,   275,   275,   275,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   275,
   123,   272,   125,   282,   275,   275,   275,   275,   287,   288,
   289,   257,   291,   292,    -1,    -1,    -1,   296,    -1,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   266,   275,
    -1,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
    -1,   279,   280,   281,   282,   291,    40,    -1,    42,   287,
   288,   289,    -1,   291,    -1,    -1,    91,   295,   296,    -1,
    -1,    -1,   257,   258,   259,   260,   261,   262,   263,   264,
   265,   266,    -1,    -1,   269,   270,   271,   272,   273,   274,
   275,   276,    -1,    -1,   279,   280,   281,   282,   123,    -1,
    -1,    -1,   287,   288,   289,    -1,   291,    91,    -1,    -1,
   295,   296,    -1,    -1,    -1,    -1,    37,    38,    -1,    40,
    -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,   123,
    -1,    -1,    -1,    64,   257,   258,   259,   260,   261,   262,
   263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
   273,   274,   275,   276,    -1,    -1,   279,   280,   281,   282,
    91,    -1,    -1,    94,   287,   288,   289,    -1,   291,    -1,
    -1,    -1,   295,   296,    37,    38,    -1,    40,    -1,    42,
    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   123,    -1,    -1,    58,    -1,    -1,    -1,    -1,
    -1,    64,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    37,    38,    -1,    40,    -1,    42,
    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    91,    -1,
    44,    94,    -1,    -1,   269,   270,   271,   272,    -1,    -1,
    -1,   276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
   123,    -1,    42,    43,    -1,    45,    -1,    47,    91,   263,
    -1,    94,    -1,    -1,    -1,   269,   270,   271,   272,   273,
   274,    -1,   276,   277,    -1,    -1,    -1,    -1,   282,    -1,
    -1,    -1,    -1,   287,   288,   289,    -1,   291,    37,    38,
   123,    40,   296,    42,    43,    -1,    45,    -1,    47,    -1,
   124,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    58,
    -1,    -1,    -1,    -1,    -1,    64,   257,   258,   259,   260,
   261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
   271,   272,   273,   274,   158,   276,    -1,    -1,   279,   280,
   281,   282,    91,    -1,    -1,    94,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   295,   296,    37,    38,    -1,    40,
    -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,
    -1,    -1,    -1,   197,   123,    -1,    -1,    58,   202,   203,
   204,   205,    -1,    64,   257,   258,   259,   260,   261,   262,
   263,   264,   265,   266,    -1,   219,   269,   270,   271,   272,
   273,   274,    -1,   276,    -1,    -1,    40,    -1,    42,   282,
    91,    -1,    -1,    94,   287,   288,   289,    -1,   291,    -1,
    -1,    -1,    -1,   296,   257,   258,   259,   260,   261,   262,
   263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
   273,   274,   123,   276,    -1,    -1,   279,   280,   281,   282,
    37,    38,    -1,    40,    -1,    42,    43,    91,    45,    -1,
    47,   294,   295,   296,    -1,    -1,    -1,   257,   258,   259,
   260,   261,   262,    -1,   264,   265,   266,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
   280,   281,   282,    40,    -1,    42,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,   295,    -1,    94,    -1,   258,
   259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
   269,   270,   271,   272,   273,   274,    -1,   276,    -1,    -1,
   279,   280,   281,   282,    -1,    -1,   123,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    -1,   295,   296,    37,    38,
    -1,    40,    -1,    42,    43,    -1,    45,    -1,    47,    -1,
    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    33,    -1,   123,   258,   259,   260,
   261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
   271,   272,   273,   274,    -1,   276,    -1,    -1,   279,   280,
   281,   282,    -1,    -1,    -1,    94,    38,    -1,    40,    41,
    -1,    43,    -1,    45,   295,   296,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,   263,
    -1,    -1,    64,    -1,   123,   269,   270,   271,   272,   273,
   274,    -1,   276,   277,    -1,    40,    41,    -1,   282,    -1,
    -1,    -1,    -1,   287,   288,   289,    -1,   291,   292,    91,
    -1,    93,   296,    -1,    -1,   124,    -1,    -1,    -1,    -1,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
    -1,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
    -1,   123,    -1,   125,    -1,   282,    91,    -1,    -1,   158,
   287,   288,   289,    -1,   291,    -1,    -1,    -1,    -1,   296,
    38,    -1,    40,    41,    -1,    43,   263,    45,    -1,    -1,
    -1,    -1,   269,   270,   271,   272,   273,   274,   123,   276,
    58,    59,    -1,    -1,    -1,   282,    64,    -1,   197,    -1,
   287,   288,   289,   202,   203,   204,   205,    -1,    -1,   296,
    -1,    -1,    -1,    40,    -1,    42,    -1,    -1,    -1,    -1,
   219,    -1,    -1,    91,    -1,    93,    -1,    -1,    -1,   258,
   259,   260,   261,   262,   263,   264,   265,   266,    -1,    -1,
   269,   270,   271,   272,   273,   274,    -1,   276,    -1,    -1,
   279,   280,   281,   282,    -1,   123,    -1,   125,    38,    -1,
    40,    41,    -1,    43,    91,    45,   295,   296,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    -1,    -1,    -1,    -1,    64,   257,   258,   259,   260,   261,
   262,   263,   264,   265,   266,    -1,   123,   269,   270,   271,
   272,   273,   274,   275,   276,    -1,    -1,   279,   280,   281,
   282,    91,    -1,    93,    -1,   287,   288,   289,    -1,   291,
    -1,    -1,    -1,   295,   296,    -1,    -1,    -1,   263,    -1,
    -1,    -1,    40,    41,   269,   270,   271,   272,   273,   274,
    -1,   276,    -1,   123,   279,   125,    -1,    -1,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,
    -1,   296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,
    -1,    -1,    -1,    91,    -1,    93,    -1,    -1,    -1,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
    -1,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
    -1,   279,   280,   281,   282,   123,    -1,   125,    -1,   287,
   288,   289,    -1,   291,    -1,    -1,    94,   295,   296,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   263,    -1,    -1,    -1,
    -1,    -1,   269,   270,   271,   272,   273,   274,    -1,   276,
   277,    -1,    40,    41,    -1,   282,    -1,    -1,    -1,    -1,
   287,   288,   289,    -1,   291,   292,    -1,    -1,    -1,   296,
    58,    59,    -1,    -1,    -1,    -1,    64,   257,   258,   259,
   260,   261,   262,   263,   264,   265,   266,    -1,    -1,   269,
   270,   271,   272,   273,   274,   275,   276,    -1,    -1,   279,
   280,   281,   282,    91,    -1,    93,    -1,   287,   288,   289,
    -1,   291,    -1,    -1,    -1,   295,   296,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    40,    41,    -1,    19,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   123,    -1,   125,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   266,    40,
    -1,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
    -1,   279,   280,   281,   282,    91,    -1,    93,    59,   287,
   288,   289,    -1,   291,    -1,    -1,    -1,   295,   296,   257,
   258,   259,   260,   261,   262,    -1,   264,   265,   266,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,   125,
    91,    -1,    40,    41,   282,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,   124,    -1,    -1,    -1,    64,    -1,    -1,    -1,
    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    -1,    93,   158,    -1,    -1,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
    -1,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
    -1,   279,   280,   281,   282,   123,    -1,   125,    -1,   287,
   288,   289,    -1,   291,    -1,   197,    -1,   295,   296,    -1,
   202,   203,   204,   205,    -1,    -1,    40,    41,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,
    64,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,    -1,    -1,   269,   270,   271,   272,   273,   274,   275,
   276,    -1,    -1,   279,   280,   281,   282,    91,    -1,    93,
    -1,   287,   288,   289,    -1,   291,    -1,    -1,    -1,   295,
   296,    -1,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
   271,   272,   273,   274,   275,   276,    -1,    -1,    -1,   123,
    -1,   125,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   296,    -1,    -1,    -1,    -1,
    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,   257,
   258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
    -1,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
    -1,   279,   280,   281,   282,    91,    -1,    93,    -1,   287,
   288,   289,    -1,   291,    -1,    -1,    -1,   295,   296,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,   125,
    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    91,    42,    93,
    -1,    -1,    -1,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,    -1,    -1,   269,   270,   271,   272,   273,
   274,   275,   276,    -1,    -1,   279,   280,   281,   282,   123,
    -1,   125,    91,   287,   288,   289,    -1,   291,    -1,    -1,
    -1,   295,   296,    -1,    -1,    -1,    -1,    91,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    41,
    42,    43,    -1,    45,   123,    47,    40,    41,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,
    64,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,    -1,    -1,   269,   270,   271,   272,   273,   274,   275,
   276,    -1,    94,   279,   280,   281,   282,    91,    -1,    93,
    -1,   287,   288,   289,    -1,   291,    -1,    37,    38,   295,
   296,    -1,    42,    43,    -1,    45,    -1,    47,    40,    41,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
    -1,   125,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    64,   257,   258,   259,   260,   261,   262,   263,
   264,   265,   266,    -1,    -1,   269,   270,   271,   272,   273,
   274,   275,   276,    93,    94,   279,   280,   281,   282,    91,
    40,    93,    42,   287,   288,   289,    -1,   291,    -1,    -1,
    -1,   295,   296,    -1,   263,    -1,    -1,    -1,    -1,    -1,
   269,   270,   271,   272,   273,   274,    -1,   276,    -1,   263,
    40,   123,    42,   125,    -1,   269,   270,   271,   272,   273,
   274,    -1,   276,   277,    -1,    -1,    -1,   296,   282,    -1,
    -1,    91,    -1,   287,   288,   289,    -1,   291,   292,    -1,
    -1,    -1,   296,    -1,    -1,    -1,    -1,    -1,    40,    -1,
    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    -1,   123,    -1,   257,   258,   259,   260,   261,
   262,    -1,   264,   265,   266,    -1,    -1,    -1,    -1,   263,
    -1,   265,   266,    40,    -1,   269,   270,   271,   272,   273,
   274,   275,   276,   123,    -1,   279,   280,   281,   282,    91,
    -1,    -1,    -1,   287,   288,   289,    -1,   291,    -1,    -1,
    -1,   295,   296,    -1,    40,    -1,    42,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    91,    -1,    -1,   257,   258,   259,
   260,   261,   262,    -1,   264,   265,   266,    -1,    -1,    -1,
    -1,   263,    -1,   265,   266,    40,    -1,   269,   270,   271,
   272,   273,   274,   275,   276,    91,   123,   279,   280,   281,
   282,    -1,    40,    -1,    42,   287,   288,   289,    -1,   291,
    -1,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
    -1,    -1,    -1,   263,    -1,    -1,    91,    -1,    -1,   269,
   270,   271,   272,   273,   274,    -1,   276,   277,    40,    41,
    -1,    -1,   282,    91,    -1,    -1,    -1,   287,   288,   289,
    -1,   291,   292,   263,    -1,    40,   296,    -1,   123,   269,
   270,   271,   272,   273,   274,    -1,   276,   277,    -1,    -1,
    -1,    -1,   282,    -1,    -1,   123,    -1,   287,   288,   289,
    -1,   291,   292,    -1,    -1,    -1,   296,    -1,    -1,    91,
    40,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,   271,
   272,   273,   274,    -1,   276,   277,    91,    -1,    93,    40,
   282,    -1,    -1,    -1,    -1,   287,   288,   289,    -1,   291,
   292,   123,    -1,    -1,   296,    -1,   263,    40,    -1,    -1,
    -1,    -1,   269,   270,   271,   272,   273,   274,   123,   276,
    -1,    91,   279,    93,    40,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   263,    -1,   296,
    91,    -1,    40,   269,   270,   271,   272,   273,   274,    -1,
   276,   277,    -1,   123,    -1,    -1,   282,    -1,    91,    40,
    -1,   287,   288,   289,    -1,   291,   292,    -1,    -1,    -1,
   296,    -1,   123,    -1,    -1,    91,    40,    -1,   263,    -1,
    -1,    -1,    -1,    -1,   269,   270,   271,   272,   273,   274,
   123,   276,    -1,    91,   279,   263,    -1,    -1,    -1,    -1,
    -1,   269,   270,   271,   272,   273,   274,   123,   276,   277,
    91,   296,    93,    -1,   282,    -1,    -1,    -1,    -1,   287,
   288,   289,    -1,   291,   292,   123,    40,    91,   296,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   263,   123,    -1,    40,    -1,    -1,   269,   270,   271,
   272,   273,   274,    -1,   276,    -1,    -1,    -1,   263,   123,
    -1,    -1,    -1,    40,   269,   270,   271,   272,   273,    -1,
   275,   276,    -1,    -1,   296,    -1,    -1,    91,    -1,    93,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   296,    -1,   263,    -1,    91,    -1,    -1,    -1,   269,
   270,   271,   272,   273,    -1,   275,   276,    -1,    -1,   123,
    -1,    -1,   263,    -1,    91,    -1,    -1,    -1,   269,   270,
   271,   272,   273,   274,    -1,   276,   296,   123,    -1,    -1,
   263,    -1,    -1,    -1,    -1,    -1,   269,   270,   271,   272,
   273,   274,    -1,   276,    -1,   296,   123,   263,    -1,    -1,
    -1,    -1,    -1,   269,   270,   271,   272,   273,   274,    -1,
   276,    -1,    -1,   296,    -1,   263,    -1,    -1,    -1,    -1,
    -1,   269,   270,   271,   272,   273,   274,    -1,   276,    -1,
   296,     0,   263,    -1,    -1,    -1,    -1,    -1,   269,   270,
   271,   272,   273,    12,    -1,   276,    -1,    -1,   296,   263,
    19,    -1,    -1,    -1,    -1,   269,   270,   271,   272,   273,
   274,    -1,   276,    37,    38,   296,    -1,    -1,    42,    43,
    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    37,    38,
    -1,    -1,   296,    42,    43,    -1,    45,    -1,    47,    -1,
    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   263,
    -1,    -1,    -1,    -1,    -1,   269,   270,   271,   272,   273,
    -1,    -1,   276,    -1,    -1,    -1,    -1,   263,    -1,    -1,
    94,    -1,    -1,   269,   270,   271,   272,   273,    -1,    -1,
   276,    -1,   296,    -1,   103,    94,   263,    -1,    -1,    -1,
    -1,    -1,   269,   270,   271,   272,   273,    -1,    -1,   276,
   296,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   158,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   170,    -1,    -1,    -1,    -1,   175,   176,   177,   178,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,
    -1,    -1,    -1,   202,   203,   204,   205,    -1,    -1,    -1,
    -1,   210,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   219,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    19,
    -1,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   257,   258,   259,   260,   261,   262,    -1,
   264,   265,   266,    -1,    44,    45,    -1,    -1,   257,   258,
   259,   260,   261,   262,    -1,   264,    -1,    57,    -1,    59,
    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    -1,    84,    85,    86,    87,    88,    89,
    90,    -1,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   110,    -1,   112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   153,   154,    -1,    -1,    -1,   158,   159,
    -1,    -1,    -1,    -1,    -1,    -1,   166,   167,    -1,   169,
    -1,   171,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,
    -1,    -1,   202,   203,   204,   205,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
    };

  /** maps symbol value to printable name.
      @see #yyExpecting
    */
  protected static final String[] yyNames = {
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,"'%'","'&'",
    null,"'('","')'","'*'","'+'","','","'-'",null,"'/'",null,null,null,
    null,null,null,null,null,null,null,"':'","';'",null,null,null,null,
    "'@'",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,"'{'","'|'","'}'",null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "EQ","EQEQ","GT","GTEQ","LT","LTEQ","NOT","NOTEQ","OR","AND","SHR",
    "SHL","INT","NUM","STR","WORD","FUNC","FUNCARG","EOL","ACCESSOR","IF",
    "ELSE","FOR","REPEAT","WHILE","RETURN","GET_VARNAME","LET","AS",
    "LOCAL","BREAK","CONTINUE","CONST","THEN","BEGIN","END",
    "DEF_ACCESSOR","INCLUDE","FOREACH","UMINUS",
    };

  /** printable rules for debugging.
    */
  protected static final String [] yyRule = {
    "$accept : program",
    "program : stmts",
    "stmts : stmt_c",
    "stmts : none stmt_end",
    "stmts : stmts none stmt_end",
    "stmts : stmts stmt_block",
    "stmts : stmts stmt_c",
    "stmts : stmts if_stmt",
    "stmts : stmts for_stmt",
    "stmts : stmts while_stmt",
    "stmts : stmts repeat_stmt",
    "stmts : stmts foreach_stmt",
    "stmt_block : BEGIN stmts END",
    "stmt_c : stmt stmt_end",
    "stmt : callfunc",
    "stmt : def_func",
    "stmt : include_stmt",
    "stmt : RETURN",
    "stmt : expr RETURN",
    "stmt : BREAK",
    "stmt : CONTINUE",
    "stmt : let",
    "stmt : def_local_var",
    "stmt : WORD error",
    "def_local_var : WORD AS LOCAL",
    "def_local_var : WORD AS LOCAL EQ expr",
    "def_local_var : def_local_var WORD",
    "def_local_var : def_local_var WORD EQ expr",
    "include_stmt : filename INCLUDE",
    "if_stmt : IF expr if_true",
    "if_stmt : IF expr if_true ELSE if_false",
    "if_stmt : IF expr stmt stmt_end",
    "if_stmt : IF expr if_true ELSE eol_none if_stmt",
    "if_true : BEGIN stmts END",
    "if_false : BEGIN stmts END",
    "for_stmt : expr_list FOR BEGIN stmts END",
    "repeat_stmt : expr REPEAT BEGIN stmts END",
    "while_stmt : expr WHILE BEGIN stmts END",
    "foreach_stmt : expr FOREACH BEGIN stmts END",
    "callfunc : expr_list FUNC",
    "callfunc : FUNC",
    "callcfunc : FUNC '(' expr_list ')'",
    "let : variable EQ expr",
    "let : variable EQ callfunc",
    "let : variable varprop EQ expr",
    "let : CONST variable EQ expr",
    "let : ACCESSOR EQ expr",
    "varprop : '@' WORD",
    "varprop : '@' STR",
    "varprop : '@' ACCESSOR",
    "expr : value",
    "expr : expr '*' expr",
    "expr : expr '/' expr",
    "expr : expr '%' expr",
    "expr : expr '+' expr",
    "expr : expr '-' expr",
    "expr : expr '&' expr",
    "expr : expr '^' expr",
    "expr : expr EQ expr",
    "expr : expr GT expr",
    "expr : expr GTEQ expr",
    "expr : expr LT expr",
    "expr : expr LTEQ expr",
    "expr : expr EQEQ expr",
    "expr : expr NOTEQ expr",
    "expr : expr OR expr",
    "expr : expr AND expr",
    "expr : NOT expr",
    "expr : UMINUS value",
    "expr : '(' expr ')'",
    "expr : '(' callfunc ')'",
    "expr : callcfunc",
    "expr : FUNC error",
    "array_list : expr",
    "array_list : array_list eol_none expr",
    "hash_list : hash_pair",
    "hash_list : hash_list eol_none hash_pair",
    "hash_pair : WORD ':' expr",
    "hash_pair : STR ':' expr",
    "expr_list : expr",
    "expr_list : FUNCARG",
    "expr_list : expr_list expr",
    "expr_list : expr_list FUNCARG",
    "value : variable",
    "value : NUM",
    "value : INT",
    "value : STR",
    "value : '{' eol_none hash_list eol_none '}'",
    "value : '[' eol_none array_list eol_none ']'",
    "value : '[' ']'",
    "value : '{' '}'",
    "variable : WORD",
    "variable : variable varparam",
    "variable : variable varprop",
    "variable : ACCESSOR",
    "varparam : '[' expr ']'",
    "varparam : ':' expr",
    "def_func : def_fhead func_stmts",
    "def_func : def_fhead EQ def_flib",
    "def_func : '*' ACCESSOR AS DEF_ACCESSOR LT FUNC GT FUNC",
    "def_func : '*' ACCESSOR AS DEF_ACCESSOR GT FUNC LT FUNC",
    "def_fhead : '*' funcname '(' def_fargs ')'",
    "def_fhead : '*' funcname",
    "def_fhead : '*' funcname '(' ')'",
    "funcname : FUNC",
    "funcname : FUNCARG",
    "def_fargs : WORD",
    "def_fargs : def_fargs WORD",
    "def_fargs : def_fargs '|'",
    "def_fargs : def_fargs ','",
    "def_flib : filename '@' INT",
    "func_stmts : BEGIN stmts END",
    "func_stmts : none",
    "stmt_end : EOL",
    "stmt_end : ';'",
    "eol_none :",
    "eol_none : EOL",
    "none :",
    "filename : STR",
    };

  /** debugging support, requires the package <tt>jay.yydebug</tt>.
      Set to <tt>null</tt> to suppress debugging messages.
    */
  protected jay.yydebug.yyDebug yydebug;

  /** index-checked interface to {@link #yyNames}.
      @param token single character or <tt>%token</tt> value.
      @return token name or <tt>[illegal]</tt> or <tt>[unknown]</tt>.
    */
  public static final String yyName (int token) {
    if (token < 0 || token > yyNames.length) return "[illegal]";
    String name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

  /** thrown for irrecoverable syntax errors and stack overflow.
      Nested for convenience, does not depend on parser class.
    */
  public static class yyException extends java.lang.Exception {
    public yyException (String message) {
      super(message);
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
      Nested for convenience, does not depend on parser class.
    */
  public interface yyInput {

    /** move on to next token.
        @return <tt>false</tt> if positioned beyond tokens.
        @throws IOException on input error.
      */
    boolean advance () throws java.io.IOException;

    /** classifies current token.
        Should not be called if {@link #advance()} returned <tt>false</tt>.
        @return current <tt>%token</tt> or single character.
      */
    int token ();

    /** associated with current token.
        Should not be called if {@link #advance()} returned <tt>false</tt>.
        @return value for {@link #token()}.
      */
    Object value ();
  }

  /** simplified error message.
      @see #yyerror(java.lang.String, java.lang.String[])
    */
  public void yyerror (String message) {
    yyerror(message, null);
  }

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected list of acceptable tokens, if available.
    */
  public void yyerror (String message, String[] expected) {
    if (expected != null && expected.length > 0) {
      System.err.print(message+", expecting");
      for (int n = 0; n < expected.length; ++ n)
        System.err.print(" "+expected[n]);
      System.err.println();
    } else
      System.err.println(message);
  }

  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected String[] yyExpecting (int state) {
    int token, n, len = 0;
    boolean[] ok = new boolean[yyNames.length];

    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }

    String result[] = new String[len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = yyNames[token];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @param yydebug debug message writer implementing <tt>yyDebug</tt>, or <tt>null</tt>.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  public Object yyparse (yyInput yyLex, Object yydebug)
				throws java.io.IOException, yyException {
    this.yydebug = (jay.yydebug.yyDebug)yydebug;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of {@link #yyparse}.
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as <tt>$$ = yyDefault($1)</tt>, prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for <tt>$1</tt>, or <tt>null</tt>.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  public Object yyparse (yyInput yyLex) throws java.io.IOException, yyException {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0, yyStates[] = new int[yyMax];	// state stack
    Object yyVal = null, yyVals[] = new Object[yyMax];	// value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tokens to shift

    yyLoop: for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.length) {			// dynamically increase
        int[] i = new int[yyStates.length+yyMax];
        System.arraycopy(yyStates, 0, i, 0, yyStates.length);
        yyStates = i;
        Object[] o = new Object[yyVals.length+yyMax];
        System.arraycopy(yyVals, 0, o, 0, yyVals.length);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (yydebug != null) yydebug.push(yyState, yyVal);

      yyDiscarded: for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (yydebug != null)
              yydebug.lex(yyState, yyToken, yyName(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken) {
            if (yydebug != null)
              yydebug.shift(yyState, yyTable[yyN], yyErrorFlag > 0 ? yyErrorFlag-1 : 0);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            continue yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyerror("syntax error", yyExpecting(yyState));
              if (yydebug != null) yydebug.error("syntax error");
  
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += yyErrorCode) >= 0 && yyN < yyTable.length
                    && yyCheck[yyN] == yyErrorCode) {
                  if (yydebug != null)
                    yydebug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  continue yyLoop;
                }
                if (yydebug != null) yydebug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (yydebug != null) yydebug.reject();
              throw new yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (yydebug != null) yydebug.reject();
                throw new yyException("irrecoverable syntax error at end-of-file");
              }
              if (yydebug != null)
                yydebug.discard(yyState, yyToken, yyName(yyToken), yyLex.value());
              yyToken = -1;
              continue yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (yydebug != null)
          yydebug.reduce(yyState, yyStates[yyV-1], yyN, yyRule[yyN], yyLen[yyN]);
        yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
					// line 38 "AOIParser.jay"
  { topnode = ((ANode)yyVals[0+yyTop]); }
  break;
case 2:
					// line 40 "AOIParser.jay"
  { yyVal = ((ANode)yyVals[0+yyTop]); }
  break;
case 6:
					// line 44 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 7:
					// line 45 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 8:
					// line 46 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 9:
					// line 47 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 10:
					// line 48 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 11:
					// line 49 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 12:
					// line 51 "AOIParser.jay"
  { yyVal = ((ANode)yyVals[-1+yyTop]); }
  break;
case 13:
					// line 53 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 14:
					// line 55 "AOIParser.jay"
  { yyVal = nc.addPOP(((ANode)yyVals[0+yyTop])); }
  break;
case 17:
					// line 58 "AOIParser.jay"
  { yyVal = nc.return_node();     }
  break;
case 18:
					// line 59 "AOIParser.jay"
  { yyVal = nc.return_node(((ANode)yyVals[-1+yyTop])); }
  break;
case 19:
					// line 60 "AOIParser.jay"
  { yyVal = new ANodeNop(nc.FLAG_BREAK); }
  break;
case 20:
					// line 61 "AOIParser.jay"
  { yyVal = new ANodeNop(nc.FLAG_CONTINUE); }
  break;
case 23:
					// line 64 "AOIParser.jay"
  { yyVal = nc.nop("error"); nc.error(ErrMsg.UnknownWord + ":" + (String)((Token)yyVals[-1+yyTop]).value); }
  break;
case 24:
					// line 67 "AOIParser.jay"
  { yyVal = nc.localvar(((Token)yyVals[-2+yyTop]), null); }
  break;
case 25:
					// line 68 "AOIParser.jay"
  { yyVal = nc.localvar(((Token)yyVals[-4+yyTop]), ((ANode)yyVals[0+yyTop]));   }
  break;
case 26:
					// line 69 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]), nc.localvar(((Token)yyVals[0+yyTop]), null)); }
  break;
case 27:
					// line 70 "AOIParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-3+yyTop]), nc.localvar(((Token)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop]))); }
  break;
case 28:
					// line 73 "AOIParser.jay"
  { yyVal = new ANodeNop("include"); }
  break;
case 29:
					// line 81 "AOIParser.jay"
  { yyVal = nc.if_node(((ANode)yyVals[-1+yyTop]),((ANode)yyVals[0+yyTop]),null); }
  break;
case 30:
					// line 82 "AOIParser.jay"
  { yyVal = nc.if_node(((ANode)yyVals[-3+yyTop]),((ANode)yyVals[-2+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 31:
					// line 83 "AOIParser.jay"
  { yyVal = nc.if_node(((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[-1+yyTop]), null); }
  break;
case 32:
					// line 84 "AOIParser.jay"
  { yyVal = nc.if_node(((ANode)yyVals[-4+yyTop]), ((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 33:
					// line 86 "AOIParser.jay"
  { yyVal = ((ANode)yyVals[-1+yyTop]); }
  break;
case 34:
					// line 88 "AOIParser.jay"
  { yyVal = ((ANode)yyVals[-1+yyTop]); }
  break;
case 35:
					// line 91 "AOIParser.jay"
  { yyVal = nc.for_node(((ANode)yyVals[-4+yyTop]),((ANode)yyVals[-1+yyTop])); }
  break;
case 36:
					// line 93 "AOIParser.jay"
  { yyVal = nc.repeat_node(((ANode)yyVals[-4+yyTop]),((ANode)yyVals[-1+yyTop])); }
  break;
case 37:
					// line 97 "AOIParser.jay"
  { yyVal = nc.while_node(((ANode)yyVals[-4+yyTop]),((ANode)yyVals[-1+yyTop])); }
  break;
case 38:
					// line 102 "AOIParser.jay"
  { yyVal = nc.foreach_node(null, ((ANode)yyVals[-4+yyTop]), ((ANode)yyVals[-1+yyTop])); }
  break;
case 39:
					// line 105 "AOIParser.jay"
  { yyVal = nc.callFunc(((Token)yyVals[0+yyTop]), ((ANode)yyVals[-1+yyTop]));   }
  break;
case 40:
					// line 106 "AOIParser.jay"
  { yyVal = nc.callFunc(((Token)yyVals[0+yyTop]), null); }
  break;
case 41:
					// line 108 "AOIParser.jay"
  { yyVal = nc.callFunc(((Token)yyVals[-3+yyTop]), ((ANode)yyVals[-1+yyTop])); }
  break;
case 42:
					// line 110 "AOIParser.jay"
  { yyVal = nc.let(((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 43:
					// line 111 "AOIParser.jay"
  { yyVal = nc.let(((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 44:
					// line 112 "AOIParser.jay"
  { yyVal = nc.setProperty(((ANode)yyVals[-3+yyTop]), ((Token)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 45:
					// line 113 "AOIParser.jay"
  { yyVal = new ANodeNop("const"); }
  break;
case 46:
					// line 114 "AOIParser.jay"
  { yyVal = nc.setAccessor(((Token)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 47:
					// line 116 "AOIParser.jay"
  { yyVal = ((Token)yyVals[0+yyTop]); }
  break;
case 48:
					// line 117 "AOIParser.jay"
  { yyVal = ((Token)yyVals[0+yyTop]); }
  break;
case 49:
					// line 118 "AOIParser.jay"
  { yyVal = ((Token)yyVals[0+yyTop]); }
  break;
case 51:
					// line 122 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.MUL,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 52:
					// line 123 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.DIV,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 53:
					// line 124 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.MOD,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 54:
					// line 125 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.ADD,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 55:
					// line 126 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.SUB,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 56:
					// line 127 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.ADDSTR,((ANode)yyVals[-2+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 57:
					// line 128 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.POWER,((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 58:
					// line 129 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.EQEQ, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 59:
					// line 130 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.GT,   ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 60:
					// line 131 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.GTEQ, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 61:
					// line 132 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.LT,   ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 62:
					// line 133 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.LTEQ, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 63:
					// line 134 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.EQEQ, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 64:
					// line 135 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.NOTEQ,((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 65:
					// line 136 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.OR, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 66:
					// line 137 "AOIParser.jay"
  { yyVal = nc.expr(ANodeTypes.AND,((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 67:
					// line 138 "AOIParser.jay"
  { yyVal = nc.not(((ANode)yyVals[0+yyTop])); }
  break;
case 68:
					// line 139 "AOIParser.jay"
  { yyVal = nc.uminus(((ANode)yyVals[0+yyTop])); }
  break;
case 69:
					// line 140 "AOIParser.jay"
  { yyVal = nc.setJosi(((ANode)yyVals[-1+yyTop]), ((Token)yyVals[0+yyTop])); }
  break;
case 70:
					// line 141 "AOIParser.jay"
  { yyVal = nc.setJosi(((ANode)yyVals[-1+yyTop]), ((Token)yyVals[0+yyTop])); }
  break;
case 71:
					// line 142 "AOIParser.jay"
  { yyVal = ((ANode)yyVals[0+yyTop]);              }
  break;
case 72:
					// line 143 "AOIParser.jay"
  { yyVal = nc.nop("error"); nc.error(ErrMsg.UnknownWord + ":" + (String)((Token)yyVals[-1+yyTop]).value); }
  break;
case 73:
					// line 145 "AOIParser.jay"
  { yyVal = nc.array_list_begin(((ANode)yyVals[0+yyTop])); }
  break;
case 74:
					// line 146 "AOIParser.jay"
  { yyVal = nc.array_list_append(((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 75:
					// line 148 "AOIParser.jay"
  { yyVal = nc.hash_list_begin(((ANode)yyVals[0+yyTop])); }
  break;
case 76:
					// line 149 "AOIParser.jay"
  { yyVal = nc.hash_list_append(((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 77:
					// line 151 "AOIParser.jay"
  { yyVal = nc.hash_list_pair(((Token)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 78:
					// line 152 "AOIParser.jay"
  { yyVal = nc.hash_list_pair(((Token)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 79:
					// line 154 "AOIParser.jay"
  { yyVal = nc.expr_list_top(((ANode)yyVals[0+yyTop])); }
  break;
case 80:
					// line 155 "AOIParser.jay"
  { yyVal = nc.callFunc(((Token)yyVals[0+yyTop]),null); }
  break;
case 81:
					// line 156 "AOIParser.jay"
  { yyVal = nc.expr_list_next(((ANode)yyVals[-1+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 82:
					// line 157 "AOIParser.jay"
  { yyVal = nc.expr_list_next(((ANode)yyVals[-1+yyTop]), nc.callFunc(((Token)yyVals[0+yyTop]), ((ANode)yyVals[-1+yyTop]))); }
  break;
case 84:
					// line 160 "AOIParser.jay"
  { yyVal = nc.constNum(((Token)yyVals[0+yyTop])); }
  break;
case 85:
					// line 161 "AOIParser.jay"
  { yyVal = nc.constInt(((Token)yyVals[0+yyTop])); }
  break;
case 86:
					// line 162 "AOIParser.jay"
  { yyVal = nc.constStr(((Token)yyVals[0+yyTop])); }
  break;
case 87:
					// line 163 "AOIParser.jay"
  { yyVal = nc.hash_list_end(((ANode)yyVals[-2+yyTop])); yyVal = nc.setJosi((ANode)yyVal, ((Token)yyVals[0+yyTop])); }
  break;
case 88:
					// line 164 "AOIParser.jay"
  { yyVal = nc.array_list_end(((ANode)yyVals[-2+yyTop])); yyVal = nc.setJosi((ANode)yyVal, ((Token)yyVals[0+yyTop])); }
  break;
case 89:
					// line 165 "AOIParser.jay"
  { yyVal = nc.constNull(); yyVal = nc.setJosi((ANode)yyVal, ((Token)yyVals[0+yyTop])); }
  break;
case 90:
					// line 166 "AOIParser.jay"
  { yyVal = nc.constNull(); yyVal = nc.setJosi((ANode)yyVal, ((Token)yyVals[0+yyTop])); }
  break;
case 91:
					// line 168 "AOIParser.jay"
  { yyVal = nc.getVariable(((Token)yyVals[0+yyTop])); }
  break;
case 92:
					// line 169 "AOIParser.jay"
  { yyVal = nc.getHash(((ANode)yyVals[-1+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 93:
					// line 170 "AOIParser.jay"
  { yyVal = nc.getProperty(((ANode)yyVals[-1+yyTop]),((Token)yyVals[0+yyTop])); }
  break;
case 94:
					// line 171 "AOIParser.jay"
  { yyVal = nc.getAccessor(((Token)yyVals[0+yyTop])); }
  break;
case 95:
					// line 173 "AOIParser.jay"
  { yyVal = nc.setJosi(((ANode)yyVals[-1+yyTop]), ((Token)yyVals[0+yyTop])); }
  break;
case 96:
					// line 174 "AOIParser.jay"
  { yyVal = ((ANode)yyVals[0+yyTop]); }
  break;
case 97:
					// line 177 "AOIParser.jay"
  { yyVal = nc.registerFunc(((Token)yyVals[-1+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 98:
					// line 178 "AOIParser.jay"
  { yyVal = new ANodeNop("def_lib"); }
  break;
case 99:
					// line 179 "AOIParser.jay"
  { yyVal = new ANodeNop("def_varfunc"); }
  break;
case 100:
					// line 180 "AOIParser.jay"
  { yyVal = new ANodeNop("def_varfunc"); }
  break;
case 101:
					// line 182 "AOIParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[-3+yyTop])); }
  break;
case 102:
					// line 183 "AOIParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[0+yyTop])); }
  break;
case 103:
					// line 184 "AOIParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[-2+yyTop])); }
  break;
case 104:
					// line 186 "AOIParser.jay"
  { yyVal = ((Token)yyVals[0+yyTop]); }
  break;
case 105:
					// line 187 "AOIParser.jay"
  { yyVal = ((Token)yyVals[0+yyTop]); }
  break;
case 111:
					// line 196 "AOIParser.jay"
  { yyVal = ((ANode)yyVals[-1+yyTop]); }
  break;
case 112:
					// line 197 "AOIParser.jay"
  { yyVal = ((ANode)yyVals[0+yyTop]); }
  break;
case 113:
					// line 199 "AOIParser.jay"
  { yyVal = nc.EOL(((Token)yyVals[0+yyTop])); }
  break;
case 114:
					// line 200 "AOIParser.jay"
  { yyVal = nc.EOL(((Token)yyVals[0+yyTop])); }
  break;
case 117:
					// line 205 "AOIParser.jay"
  { yyVal = new ANodeNop("none"); }
  break;
					// line 1560 "-"
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (yydebug != null) yydebug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (yydebug != null)
               yydebug.lex(yyState, yyToken,yyName(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (yydebug != null) yydebug.accept(yyVal);
            return yyVal;
          }
          continue yyLoop;
        }
        if ((yyN = yyGindex[yyM]) != 0 && (yyN += yyState) >= 0
            && yyN < yyTable.length && yyCheck[yyN] == yyState)
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (yydebug != null) yydebug.shift(yyStates[yyTop], yyState);
        continue yyLoop;
      }
    }
  }

					// line 211 "AOIParser.jay"
    public AOIParser(GlobalObject global) {
        super(global);
        nc = new AOINodeCreator(this);
    }
    public Object parse(Scanner scanner) throws AOICException{
        try {
            
            return yyparse((AOIScanner)scanner);
            
        } catch (yyException e) {
            throw new AOICException(scanner.reportCur() + ":" + e);
        } catch (java.io.IOException e) {
            throw new AOICException(scanner.reportCur() + ":" + e);
        }
    }
}
					// line 1607 "-"
