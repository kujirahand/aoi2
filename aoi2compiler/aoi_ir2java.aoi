#!/usr/local/bin/aoi
<?bas
#-----------------------------------------------------------------------
# aoi bytecode define | write to "ANodeTypes.java"
#-----------------------------------------------------------------------
ir = [
  {code=0,  name="NOP",         push=0, pop=0, args=0, ch="_"},
  {code=10, name="PUSH_NULL",   push=1, pop=0, args=0, ch="b"},
  {code=11, name="CONST_INT",   push=1, pop=0, args=1, ch="i"},
  {code=12, name="CONST_NUM",   push=1, pop=0, args=1, ch="n"},
  {code=13, name="CONST_STR",   push=1, pop=0, args=1, ch="s"},
  {code=14, name="LOAD",        push=1, pop=0, args=1, ch="d"}, # (varno) -> varref
  {code=15, name="LOAD_LOCAL",  push=1, pop=0, args=1, ch="D"}, # (varno) -> varref
  {code=16, name="GET_HASH",    push=1, pop=2, args=0, ch="h"}, # [varref, key] -> varref
  {code=17, name="STORE",       push=0, pop=1, args=1, ch="t"}, # (varno)[value] ->
  {code=18, name="STORE_LOCAL", push=0, pop=1, args=1, ch="T"}, # (varno)[value] ->
  {code=19, name="LET",         push=0, pop=2, args=0, ch="="}, # [varref, value] ->
  {code=20, name="POP",         push=0, pop=1, args=0, ch="p"},
  {code=21, name="ADD",         push=1, pop=2, args=0, ch="+"},
  {code=22, name="SUB",         push=1, pop=2, args=0, ch="-"},
  {code=23, name="MUL",         push=1, pop=2, args=0, ch="*"},
  {code=24, name="DIV",         push=1, pop=2, args=0, ch="/"},
  {code=25, name="MOD",         push=1, pop=2, args=0, ch="%"},
  {code=26, name="ADDSTR",      push=1, pop=2, args=0, ch="&"},
  {code=27, name="GT",          push=1, pop=2, args=0, ch=">"},
  {code=28, name="GTEQ",        push=1, pop=2, args=0, ch="G"},
  {code=29, name="LT",          push=1, pop=2, args=0, ch="<"},
  {code=30, name="LTEQ",        push=1, pop=2, args=0, ch="L"},
  {code=31, name="EQEQ",        push=1, pop=2, args=0, ch="e"},
  {code=32, name="NOTEQ",       push=1, pop=2, args=0, ch="o"},
  {code=33, name="NOT",         push=1, pop=1, args=0, ch="!"},
  {code=34, name="AND",         push=1, pop=2, args=0, ch="A"},
  {code=35, name="OR",          push=1, pop=2, args=0, ch="O"},
  {code=36, name="RET",         push=0, pop=0, args=0, ch="r"},
  {code=37, name="JUMP",        push=0, pop=0, args=1, ch="J"},
  {code=38, name="JUMP_ZERO",   push=0, pop=1, args=1, ch="Z"},
  {code=39, name="JUMP_NON_ZERO",push=0, pop=1, args=1,ch="N"},
  {code=40, name="CALL_USR",    push=1, pop=0, args=1, ch="u"}, # (varno)
  {code=41, name="CALL_LIB",    push=1, pop=0, args=1, ch="l"}, # (varno)
  {code=42, name="EXIT",        push=0, pop=0, args=0, ch="q"},
  {code=43, name="EOL",         push=0, pop=0, args=1, ch="~"}, # (lineno)
  {code=44, name="POWER",       push=1, pop=2, args=0, ch="w"}
]

#-----------------------------------------------------------------------
# FOR ANodeTypes.java
#-----------------------------------------------------------------------
// byte type
dim names
dim args
dim res
dim chk
dim ids
res = <qq>/**
 * AOI IR DEFINES (auto generated)
 * generated by aoi_ir2java.aoi (http://kujirahand.com)
 */
package com.aoikujira.aoi2.compiler;

public class ANodeTypes \{
</qq>
# --- num
res = res & "  // IR code number\n"
for i in ir
  code = cint(i["code"])
  name = i["name"]
  arg_count  = cint(i["args"])
  ch = i["ch"]
  if (chk[ch] = 1)
    print "ERROR ch=" & ch
    quit
  end if
  chk[ch] = 1
  res = res & "  public static final int {name} = {code};\n"
  names[code] = name
  args[code] = arg_count
  codes[code] = ch
next

# --- name
res = res & "  // IR code name\n"
res = res & "  public static final String[] names = \{\n    "
for i = 0 to array_count(names) - 1
  res = res & <qq>"{names[i]}",</qq>
  if i % 5 = 4 then res = res & "\n    "
next
res = res & "\};\n"
# --- args
res = res & "  // arguments count\n"
res = res & "  public static final int[] args = \{\n    "
for i = 0 to array_count(args) - 1
  v = cint(args[i])
  res = res & <qq>{v},</qq>
  if i % 10 = 9 then res = res & "\n    "
next
res = res & "};\n"
# --- aoicode
res = res & "  // aoicode\n"
res = res & "  public static final String[] codes = \{\n    "
for i = 0 to array_count(codes) - 1
  res = res & <qq>"{codes[i]}",</qq>
  if i % 5 = 4 then res = res & "\n    "
next
res = res & "\};\n"

# --- fin
res = res & <qq>
\}
</qq>

print res
file_save("ANodeTypes.java", res)

#-----------------------------------------------------------------------
# FOR vmtable.as
#-----------------------------------------------------------------------
tmp = ""
res = <qq>/**
 * vmtable.as
 */

class vmtable
\{
  static var ftable:Array;
  static var ntable:Object;
  static function init() \{
    ftable = new Array();
    ntable = new Object();
</qq>
for i = 0 to array_count(codes) - 1
  ch   = codes[i]
  name = names[i]
  if ch = "" then continue
  chno = asc(ch)
  res = res & <qq>    ftable[{chno}] = Stackmachine.run_{name};//"{ch}"\n</qq>
  res = res & <qq>    ntable[{chno}] = "{name}";\n</qq>
  tmp = tmp & <qq>    private function run_{name}(machine:Stackmachine) \{\}\n</qq>
next

res = res & <qq>    // end of table
  \}// end of function init
\}// end of class
</qq>

print res
file_save("vmtable.as",res)
file_save("template-aoivm.txt",tmp)

#-----------------------------------------------------------------------
# FOR vmtable.js
#-----------------------------------------------------------------------
tmp = ""
res = <qq>/**
 * vmtable.js
 */

// vmtable
var vmtable = \{
  ftable:\{\},
  ntable:\{\},
  init: function () \{
    var chk = function (name, a) \{ if (typeof a == "undefined") \{ console.log("ir.link.error=" + name); \} return a; \}
    var ftable = this.ftable;
    var ntable = this.ntable;
</qq>
for i = 0 to array_count(codes) - 1
  ch   = codes[i]
  name = names[i]
  if ch = "" then continue
  res = res & <qq>    ftable["{ch}"] = chk("{name}",Stackmachine.run_{name});\n</qq>
  res = res & <qq>    ntable["{ch}"] = "{name}";\n</qq>
  tmp = tmp & <qq>Stackmachine.run_{name} = function (mac, arg) \{
  // todo: run_{name}
\};
</qq>
next

res = res & <qq>    // end of table
  \}// end of function init
\}// end of class
/*
{tmp}
*/
</qq>

print res
file_save("vmtable.js",res)


#-----------------------------------------------------------------------
# FOR vmtable.java
#-----------------------------------------------------------------------
res = <qq>/**
 * vmtable.java generated by aoi_ir2java.aoi
 */
 
package com.aoikujira.aoi2.vm;

import java.util.*;
import com.aoikujira.aoi2.compiler.*;
import com.aoikujira.aoi2.utils.*;

class vmtable \{
    public IntegerHashtable ftable;
    public IntStrHashtable nametable;
    public vmtable() \{
        ftable = new IntegerHashtable();
        nametable = new IntStrHashtable();
        init();
    \}
    private void init() \{
</qq>

#----

con = ""
sw  = ""
rn  = ""
for i = 0 to array_count(codes) - 1
  ch   = codes[i]
  name = names[i]
  if ch = "" then continue
  res = res & <qq>        ftable.putInt("{ch}", {i});
        nametable.putIntStr({i}, "{name}");
</qq>
  con = con & <qq>    public static final int {name} = {i};\n</qq>
  sw  = sw  & <qq>        case vmtable.{name}: run_{name}(); break;\n</qq>
  rn  = rn  & <qq>    private void run_{name}() \{\}\n</qq>
next

res = res & <qq>
    \}
/* const */
{con}
/*
        switch (code) \{
{sw}
        \}
*/
/*
{rn}
*/
\}
</qq>

file_save("vmtable.java", res)




print "ok. saved.\n"
?>

