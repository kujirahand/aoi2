class PhidgetRFID extends Phidget {	private var numOutputs:Number;	private var outputStates:Array = new Array();	private var lastTag:String = "";		//events	public function onTag(tag:String){}		//constructor	public function PhidgetRFID() {		outputStates = new Array();		for (var i = 0; i<4; i++) {			outputStates[i] = false;		}	}	//getters and setters	public function getNumOutputs():Number{		return numOutputs;	}	public function getOutputState(Index:Number):Boolean{		return outputStates[Index];	}	public function setOutputState(Index:Number, newVal:Boolean){		var i=0;		if(newVal)			i=1;		mySocket.send(Constants.PNET_DATAOUT+","+Index+","+i);		outputStates[Index] = newVal;	}	public function getLastTag():String{		return lastTag;	}		//private functions	private function userOnConnect(success) {		if (success) {			mySocket.send(Constants.PNET_OPENPACKET+","+Constants.PHIDDEF_RFID+","+serialNumber);		}	}	private function init(dataArray:Array) {		var spec = parseInt(dataArray[2]);		numOutputs = Constants.Phid_Device_Def[spec][3];	}	private function gotData(dataArray:Array) {		var j:Number = 0;		for (var i = 0; i<numOutputs; i++) {			outputStates[i] = getBoolean(dataArray[1].substring(i, i+1));		}		if (dataArray.length == 3) {			lastTag = dataArray[2];			onTag(lastTag);		}	}}