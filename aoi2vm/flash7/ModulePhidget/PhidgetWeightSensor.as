class PhidgetWeightSensor extends Phidget {	private var numWeightInputs:Number;	private var Weight:Number;	private var lastweight:Number;	private var WeightChangeTrigger:Number;	private var stateImperial:Boolean;		//events	public function onWeightChange(weight:Number){}		//constructor	public function PhidgetWeightSensor() {		Weight=-500;		lastweight=-500;		WeightChangeTrigger=1;	}	//getters and setters	public function GetWeight():Number{		var temp=Weight;		if(stateImperial)			temp=temp * 1.8 + 32;		return temp;	}	public function GetWeightChangeTrigger():Number{		return WeightChangeTrigger;	}	public function SetWeightChangeTrigger(newVal:Number){		WeightChangeTrigger = newVal;	}	public function SetUseImperial(newVal:Boolean){		stateImperial=newVal;	}		//private functions	private function userOnConnect(success) {		if (success) {			mySocket.send(Constants.PNET_OPENPACKET+","+Constants.PHIDDEF_WEIGHTSENSOR+","+serialNumber);		}	}	private function init(dataArray:Array) {		var spec = parseInt(dataArray[2]);		numWeightInputs = Constants.Phid_Device_Def[spec][3];	}	private function gotData(dataArray:Array) {			var temp = 0, temp2;			temp = parseFloat(dataArray[1]);			if((temp<=lastweight-WeightChangeTrigger ||			temp>=lastweight+WeightChangeTrigger)) {				temp2=temp;				if(stateImperial)					temp2=temp * 1.8 + 32;				onWeightChange(temp2);				lastweight = temp;			}			Weight = temp;	}}