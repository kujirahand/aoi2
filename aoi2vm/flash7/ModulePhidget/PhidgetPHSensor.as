class PhidgetPHSensor extends Phidget {	private var numPHInputs:Number;	private var PH:Number;	private var lastPH:Number;	private var PHChangeTrigger:Number;		//events	public function onPHChange(ph:Number){}		//constructor	public function PhidgetPHSensor() {		PH=-20;		lastPH=-20;		PHChangeTrigger=0.2;	}	//getters and setters	public function GetPH():Number{		return PH;	}	public function GetPHChangeTrigger():Number{		return PHChangeTrigger;	}	public function SetPHChangeTrigger(newVal:Number){		PHChangeTrigger = newVal;	}		//private functions	private function userOnConnect(success) {		if (success) {			mySocket.send(Constants.PNET_OPENPACKET+","+Constants.PHIDDEF_PHSENSOR+","+serialNumber);		}	}	private function init(dataArray:Array) {		var spec = parseInt(dataArray[2]);		numPHInputs = Constants.Phid_Device_Def[spec][3];	}	private function gotData(dataArray:Array) {		var temp:Number = 0;		temp = parseFloat(dataArray[1]);		if(temp<=lastPH-PHChangeTrigger || temp>=lastPH+PHChangeTrigger) {			onPHChange(temp);			lastPH = temp;		}		PH = temp;	}}