class PhidgetEncoder extends Phidget {	private var numEncoders:Number;	private var numInputs:Number;	private var physicalState:Array = new Array(); //Boolean	private var encoderPosition:Array = new Array(); //Number	private var encoderTimeStamp:Array = new Array(); //Number		//events	public function onInputChange(index:Number, newState:Boolean){}	public function onPositionChange(index:Number, time:Number, encoderDisplacement:Number){}		//constructor	public function PhidgetAccelerometer() {		for(var i=0;i<4;i++) {			physicalState[i]=false;			encoderPosition[i]=0;			encoderTimeStamp[i]=0;		}	}	//getters and setters	public function GetNumInputs():Number{		return numInputs;	}	public function GetNumEncoders():Number{		return numEncoders;	}	public function GetEncoderPosition(Index:Number):Number{		return encoderPosition[Index];	}	public function GetInputState(Index:Number):Boolean{		return physicalState[Index];	}	public function SetEncoderPosition(Index:Number, newVal:Number){}		//private functions	private function userOnConnect(success) {		if (success) {			mySocket.send(Constants.PNET_OPENPACKET+","+Constants.PHIDDEF_ENCODER+","+serialNumber);		}	}	private function init(dataArray:Array) {		var spec = parseInt(dataArray[2]);		numEncoders = Constants.Phid_Device_Def[spec][3];		numInputs = Constants.Phid_Device_Def[spec][4];	}	private function gotData(dataArray:Array) {		var posn:Number, time:Number;		
		for(var i=0;i<numInputs;i++) {
			var temp:Boolean = getBoolean(dataArray[i+1]);			if(temp!=physicalState[i]) {				onInputChange(i,temp);			}			physicalState[i] = temp;
		}
			
		for(var i=0;i<numEncoders;i++) {
			posn  = parseInt(dataArray[numInputs+2*i+2]);			time  = parseInt(dataArray[numInputs+2*i+1]);						if(posn!=encoderPosition[i]) {				onPositionChange(i, time, posn);			}			encoderPosition[i] = posn;			encoderTimeStamp[i] = time;
		}	}}