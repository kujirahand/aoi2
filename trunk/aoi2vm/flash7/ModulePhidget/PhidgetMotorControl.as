class PhidgetMotorControl extends Phidget {	private var numMotors:Number;	private var numInputs:Number;	private var inputStates:Array = new Array();	private var motorPWMCurrent:Array = new Array();	private var motorAcceleration:Array = new Array();		//events	public function onInputChange(index:Number, newState:Boolean){}	public function onMotorChange(index:Number, newVal:Number){}		//constructor	public function PhidgetMotorControl() {		for(var i=0;i<2;i++) {			motorAcceleration[i]=10;		}	}		//getters and setter	public function GetNumMotors():Number{		return numMotors;	}	public function GetNumInputs():Number{		return numInputs;	}	public function GetInputState(Index:Number):Boolean{		return inputStates[Index];	}	public function GetAcceleration(Index:Number):Number{		return motorAcceleration[Index];	}	public function GetMotorSpeed(Index:Number):Number{		return motorPWMCurrent[Index];	}	public function SetAcceleration(Index:Number, newVal:Number){		mySocket.send(Constants.PNET_DATAOUT+","+Index+",1,"+newVal);		motorAcceleration[Index] = newVal;	}	public function SetMotorSpeed(Index:Number, newVal:Number){		mySocket.send(Constants.PNET_DATAOUT+","+Index+",0,"+newVal);	}		//private functions	private function userOnConnect(success) {		if (success) {			mySocket.send(Constants.PNET_OPENPACKET+","+Constants.PHIDDEF_MOTORCONTROL+","+serialNumber);		}	}	private function init(dataArray:Array) {		var spec = parseInt(dataArray[2]);		numMotors = Constants.Phid_Device_Def[spec][3];		numInputs = Constants.Phid_Device_Def[spec][4];	}	private function gotData(dataArray:Array) {		for(var i=0;i<numInputs;i++) {			var temp:Boolean = getBoolean(dataArray[1].substring(i,i+1));			if(temp!=inputStates[i]) {				onInputChange(i, temp);			}			inputStates[i] = temp;		}				for(var i=0;i<numMotors;i++) {			var pwm:Number  = parseInt(dataArray[2+i]);			if((pwm!=motorPWMCurrent[i])) {				onMotorChange(i, pwm);			}			motorPWMCurrent[i] = pwm;		}	}}