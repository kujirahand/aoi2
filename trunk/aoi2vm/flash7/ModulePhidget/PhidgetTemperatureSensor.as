class PhidgetTemperatureSensor extends Phidget {	private var numTempInputs:Number;	private var Temperature:Array = new Array();	private var lastTrigger:Array = new Array();	private var TempChangeTrigger:Array = new Array();	private var stateImperial:Boolean = false;		//events	public function onTemperatureChange(index:Number, temperature:Number){}		//constructor	public function PhidgetTemperatureSensor() {		for(var i=0;i<8;i++) {			Temperature[i]=-500;			lastTrigger[i]=-500;			TempChangeTrigger[i]=1;		}	}	//getters and setters	public function GetNumTemperatureInputs():Number{		return numTempInputs;	}	public function GetTemperature(Index:Number):Number{		var temp=Temperature[Index];		if(stateImperial)			temp=temp * 1.8 + 32;		return temp;	}	public function GetTemperatureChangeTrigger(Index:Number):Number{		return TempChangeTrigger[Index];	}	public function SetTemperatureChangeTrigger(Index:Number, newVal:Number){		TempChangeTrigger[Index] = newVal;	}	public function SetUseImperial(newVal:Boolean){		stateImperial=newVal;	}		//private functions	private function userOnConnect(success) {		if (success) {			mySocket.send(Constants.PNET_OPENPACKET+","+Constants.PHIDDEF_TEMPERATURESENSOR+","+serialNumber);		}	}	private function init(dataArray:Array) {		var spec = parseInt(dataArray[2]);		numTempInputs = Constants.Phid_Device_Def[spec][3];	}	private function gotData(dataArray:Array) {		for(var i=0;i<numTempInputs;i++) {			var temp = 0, temp2;			temp = parseFloat(dataArray[i+1]);			if((temp<=lastTrigger[i]-TempChangeTrigger[i] ||			temp>=lastTrigger[i]+TempChangeTrigger[i])) {				temp2=temp;				if(stateImperial)					temp2=temp * 1.8 + 32;				onTemperatureChange(i,temp2);				lastTrigger[i] = temp;			}			Temperature[i] = temp;		}	}}