// created by jay 1.1.0 (c) 2002-2006 ats@cs.rit.edu
// skeleton Java 1.1.0 (c) 2002-2006 ats@cs.rit.edu

					// line 1 "BasicParser.jay"

// genetated by BasicParser.jay
package com.aoikujira.aoi2.compiler.lang.basic;

import com.aoikujira.utils.*;
import com.aoikujira.aoi2.compiler.*;

import java.io.*;

public class BasicParser extends Parser{
    private BasicNodeCreator nc;

					// line 18 "-"
  // %token constants
  public static final int AND = 257;
  public static final int OR = 258;
  public static final int SHR = 259;
  public static final int SHL = 260;
  public static final int MOD = 261;
  public static final int EOL = 262;
  public static final int INT = 263;
  public static final int NUM = 264;
  public static final int STR = 265;
  public static final int WORD = 266;
  public static final int FUNC = 267;
  public static final int EQ = 268;
  public static final int IF = 269;
  public static final int THEN = 270;
  public static final int ELSE = 271;
  public static final int END = 272;
  public static final int FOR = 273;
  public static final int TO = 274;
  public static final int NEXT = 275;
  public static final int STEP = 276;
  public static final int WHILE = 277;
  public static final int WEND = 278;
  public static final int FUNCTION = 279;
  public static final int RETURN = 280;
  public static final int SUB = 281;
  public static final int INCLUDE = 282;
  public static final int DIM = 283;
  public static final int IT = 284;
  public static final int BREAK = 285;
  public static final int CONTINUE = 286;
  public static final int CONST = 287;
  public static final int FOREACH = 288;
  public static final int IN = 289;
  public static final int EQEQ = 290;
  public static final int GT = 291;
  public static final int GTEQ = 292;
  public static final int LT = 293;
  public static final int LTEQ = 294;
  public static final int NOTEQ = 295;
  public static final int UMINUS = 296;
  public static final int NOT = 297;
  public static final int yyErrorCode = 256;

  /** number of final state.
    */
  protected static final int yyFinal = 16;

  /** parser tables.
      Order is mandated by <i>jay</i>.
    */
  protected static final short[] yyLhs = {
//yyLhs 109
    -1,     0,     2,     2,     9,     9,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,    30,
    30,    28,    28,    28,    27,    10,    11,    11,    12,    12,
    31,    31,    17,    17,    13,    13,    18,    18,    18,    14,
    19,    19,    19,    15,    15,    16,    16,    16,    25,    25,
    29,    29,    29,    29,    29,    29,    26,    26,     4,     4,
     4,     7,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     6,     6,     6,     6,     6,     6,     6,     6,     6,
     6,    22,    22,    21,    21,    33,    33,    20,    20,    23,
    23,    23,    24,     8,     8,     8,    32,    32,     1,
    }, yyLen = {
//yyLen 109
     2,     1,     1,     2,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
     2,     2,     4,     4,     2,     3,     1,     1,     7,     5,
     1,     1,     1,     2,     9,    11,     1,     2,     1,     5,
     1,     2,     1,     7,     7,     1,     2,     1,     3,     5,
     2,     5,     4,     2,     5,     4,     1,     2,     1,     1,
     2,     3,     1,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
     2,     1,     1,     1,     3,     3,     3,     2,     2,     1,
     1,     1,     4,     1,     4,     3,     3,     1,     3,     4,
     1,     3,     2,     1,     1,     1,     1,     1,     0,
    }, yyDefRed = {
//yyDefRed 203
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    59,    15,    16,     0,     0,     0,     0,     0,     0,
     0,     2,     6,     7,     8,     9,    10,    13,    26,    27,
    11,    12,    14,     0,    18,    17,    83,    81,    82,    58,
     0,     0,     0,     0,     0,     0,     0,     0,    62,     0,
    90,     0,     0,     0,     0,     0,     0,     0,    24,     0,
     0,     0,   103,   104,   105,     5,     3,     4,     0,     0,
    60,     0,     0,     0,    80,    79,   101,     0,     0,    87,
     0,     0,     0,     0,    88,     0,    93,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    30,    31,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    48,    84,    99,    85,     0,     0,     0,    86,     0,     0,
     0,    66,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    63,    64,    65,     0,     0,     0,     0,     0,
    52,     0,    55,     0,     0,     0,     0,    61,     0,    57,
   106,   107,     0,     0,     0,     0,     0,     0,    29,     0,
     0,     0,    42,    39,    51,    54,     0,    49,     0,    94,
     0,    33,     0,     0,    41,     0,    28,     0,     0,     0,
    38,    44,     0,    47,    43,     0,     0,    37,    46,     0,
    34,     0,    35,
    }, yyDgoto = {
//yyDgoto 34
    16,    17,    18,    19,    46,    47,    48,    70,    65,    21,
    22,    23,    24,    25,    26,    27,   194,   168,   191,   173,
    78,    85,    81,    50,    29,    30,   120,    31,    32,    33,
    34,   107,   162,    86,
    }, yySindex = {
//yySindex 203
  1484,  -219,   562,   601,  -232,   601,  -223,   601,  -217,  -204,
  -200,     0,     0,     0,  -199,  -232,     0,   -45,  1484,   -45,
   -91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  1040,     0,     0,     0,     0,     0,     0,
    28,   370,   601,   263,   493,   -95,   -18,   319,     0,    39,
     0,   601,    44,   -74,   122,    36,   319,    48,     0,  -184,
  -183,   -87,     0,     0,     0,     0,     0,     0,   601,   601,
     0,  -171,  1348,   263,     0,     0,     0,   141,    52,     0,
   319,   -39,    41,    50,     0,   -33,     0,   601,   601,   601,
   601,   601,   601,   601,   601,   601,   601,   601,   601,   601,
   601,   601,   601,   601,   141,     0,     0,  1484,   601,   601,
  1484,   498,   503,   601,   601,   601,   319,   161,    38,  -170,
     0,     0,     0,     0,  -149,   601,   601,     0,  -149,   102,
   102,     0,    32,    32,    32,    32,    32,    32,    32,   -21,
   -21,   -21,     0,     0,     0,   319,   963,   305,   122,   204,
     0,    54,     0,    66,   319,   319,   122,     0,  -141,     0,
     0,     0,   601,   319,   319,  -230,  1484,  -146,     0,   601,
  1484,  -153,     0,     0,     0,     0,  1484,     0,   319,     0,
  1383,     0,    83,  1286,     0,  1320,     0,   601,  1484,  -142,
     0,     0,  -161,     0,     0,   122,  1286,     0,     0,  1484,
     0,  1286,     0,
    }, yyRindex = {
//yyRindex 203
     6,   -63,    13,     0,     0,     0,     0,    45,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     6,     0,     0,     0,     0,     0,     0,
   -35,     0,     0,     0,     0,     0,     4,   -26,     0,    47,
     0,     0,     6,     0,     0,  1002,    53,  1069,     0,    56,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     6,     0,     0,     0,     0,    88,     0,     0,
   -15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     6,     0,     0,
     6,     0,     0,     0,     0,     0,    58,     0,     0,    60,
     0,     0,     0,     0,   680,     0,     0,     0,  -210,  1219,
  1252,     0,   747,   789,   829,   868,   925,  1130,  1180,   382,
   421,   460,     0,     0,     0,   -19,     6,     0,     0,     6,
     0,     0,     0,     0,    93,    96,     0,     0,     0,     0,
     0,     0,     0,   -25,   -24,     0,     6,    98,     0,     0,
     6,   103,     0,     0,     0,     0,     6,     0,   -13,     0,
     6,     0,     0,     6,     0,     6,     0,     0,     6,   138,
     0,     0,   142,     0,     0,     0,     6,     0,     0,     6,
     0,     6,     0,
    }, yyGindex = {
//yyGindex 34
     0,   -71,   336,     0,  1512,  1691,    92,     0,   409,   790,
     0,     0,     0,     0,     0,     0,     0,   -46,  -158,     0,
    25,     0,     0,  1544,     0,     0,     0,     0,     0,     0,
     0,     0,     7,   -27,
    }, yyTable = {
//yyTable 1879
    69,     1,   100,   100,    69,   124,   100,   100,   100,   100,
   100,   128,   100,    63,    64,    97,   102,    69,    97,    96,
    95,   100,    98,   100,   100,    98,   101,    49,    58,    91,
    84,    92,    97,    97,    39,    82,    83,    35,   200,    98,
    98,    89,    89,   202,    55,    89,    89,    89,    89,    89,
    57,    89,    11,   161,   123,   108,   108,   161,   100,   108,
   108,    58,    89,    89,   108,   108,    59,    60,    73,   102,
    99,   100,   100,    69,   100,    97,   111,    98,    91,   101,
    92,   102,    99,   103,   113,   114,   100,    97,   112,    98,
   100,   101,   127,   122,   118,   174,   103,    89,   103,   125,
    96,    95,   158,    19,    19,   102,   102,   175,   126,   159,
   103,    20,    20,   160,    21,    21,    25,    25,    56,    56,
   102,    99,   177,   181,   184,   100,    97,   198,    98,    89,
   101,   197,    97,    74,   186,   165,   151,   153,   179,   102,
    99,    63,    64,     0,   100,    97,     0,    98,     0,   101,
     0,    22,    22,     0,    23,    23,    32,    32,     0,   102,
    99,    40,    40,     0,   100,    97,     0,    98,     0,   101,
    82,    83,     0,     0,     0,     0,     0,    68,   102,    99,
    63,    64,   121,   100,    97,     0,    98,     0,   101,     0,
     0,     0,     0,     0,   108,     0,    36,    36,   102,    99,
    45,    45,   115,   100,    97,    58,    98,     0,   101,     0,
     0,     0,     0,     0,     0,   109,     0,    62,     0,     0,
     0,     0,   100,   100,     0,     0,   100,   100,     0,     0,
     0,   100,   100,   100,   100,   100,    97,     0,   100,   100,
    89,   100,   100,    98,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   157,   100,   100,   100,   100,   100,
   100,    89,    89,   108,     0,    89,    89,     0,   108,     0,
    89,    89,    89,    89,    89,   100,     0,    89,    89,     0,
    89,    89,     0,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
     0,    87,    88,    51,    76,    89,     0,    19,     0,   102,
     1,     2,    90,     3,   105,    20,     0,     4,    21,     0,
    25,     5,    56,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,     0,    91,    92,    93,    94,    95,    96,
    87,    88,   102,    99,    89,    62,     0,   100,    97,     0,
    98,    90,   101,     0,    44,    22,   102,    99,    23,   187,
    32,   100,    97,    89,    98,    40,   101,     0,     0,    72,
    90,     0,     0,    91,    92,    93,    94,    95,    96,    87,
    88,     0,     0,    89,    62,     0,    45,     0,     0,     0,
    90,     0,    91,    92,    93,    94,    95,    96,    87,    88,
    36,     0,    89,     0,    45,     0,     0,     0,     0,    90,
    51,     0,    91,    92,    93,    94,    95,    96,    87,    88,
    67,     0,    89,    67,     0,    67,    67,    67,    67,    90,
     0,    91,    92,    93,    94,    95,    96,     0,     0,     0,
    67,    67,     0,   146,     0,     0,   149,     0,     0,     0,
     0,    91,    92,    93,    94,    95,    96,     0,     0,    68,
     0,    44,    68,   110,    68,    68,    68,     0,     0,     0,
     1,     2,     0,     3,     0,    67,   171,     4,     0,    68,
    68,     5,   172,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    45,     0,     0,     0,     0,    69,     0,
     0,    69,   180,    69,    69,    69,   183,    67,     0,     0,
     0,     0,   185,     0,    68,     0,     0,     0,    69,    69,
     0,     0,     0,     0,   196,     0,    36,    37,    38,    39,
    40,     0,     0,    51,     0,   201,     0,     0,    51,   150,
     0,     0,     0,    51,   152,     0,    68,    11,     0,     0,
     0,     0,     0,    69,     0,     0,     0,   170,     0,    41,
    42,     0,    87,    88,     0,   176,    89,     0,     0,     0,
     0,     0,     0,    90,     0,     0,    87,    88,     0,   169,
    89,     0,     0,     0,    44,    69,    79,    90,     0,    44,
     0,   188,     0,     0,    44,    91,    92,    93,    94,    95,
    96,     0,    43,     0,   199,     0,     0,     0,     0,    91,
    92,    93,    94,    95,    96,     0,    45,     0,     0,     0,
     0,    45,     0,     0,     0,     0,    45,     0,     0,     0,
     0,     0,     0,    36,    37,    38,    39,    40,     0,    67,
    67,    51,     0,     0,    67,     0,     0,     0,    67,    67,
    67,    67,    67,    44,    11,    67,    67,     0,    67,    67,
     0,    67,    67,    67,    67,    67,    67,    67,    67,    67,
    67,     0,    67,    67,    67,    67,    67,    67,    68,    68,
     0,     0,     0,    68,     0,    45,     0,    68,    68,    68,
    68,    68,    44,     0,    68,    68,     0,    68,    68,     0,
    68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
     0,    68,    68,    68,    68,    68,    68,    69,    69,     0,
   108,     0,    69,     0,    45,     0,    69,    69,    69,    69,
    69,     0,     0,    69,    69,     0,    69,    69,     0,    69,
    69,    69,    69,    69,    69,    69,    69,    69,    69,     0,
    69,    69,    69,    69,    69,    69,    36,    37,    38,    39,
    40,    36,    37,    38,    39,    40,    36,    37,    38,    39,
    40,   108,     0,     0,     0,     0,     0,    11,     0,     0,
     0,     0,    11,     0,     0,     0,     0,    11,    70,    41,
    42,    70,     0,     0,    41,    42,     0,     0,     0,    41,
    42,     0,     0,   108,     0,    70,    70,     0,    66,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    36,    37,    38,    39,    40,
    75,     0,     0,    75,     0,     0,     0,     0,     0,     0,
    70,     0,   106,     0,     0,     0,    11,    75,    75,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    41,    42,
     0,     0,    66,     0,    36,    37,    38,    39,    40,     0,
    71,     0,    70,    71,     0,     0,     0,     0,     0,     0,
     0,     0,    75,     0,     0,    11,     0,    71,    71,     0,
     0,     0,     0,     0,     0,     0,     0,    41,    42,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    72,
     0,     0,    72,     0,    75,     0,     0,     0,     0,     0,
     0,     0,    71,     0,     0,     0,    72,    72,     0,     0,
     0,     0,     0,     0,     0,     0,    66,     0,     0,    66,
     0,     0,     0,   108,   108,   108,   108,   108,     0,     0,
     0,     0,     0,     0,    71,     0,     0,     0,     0,     0,
     0,    72,     0,     0,   108,     0,    73,     0,     0,    73,
    66,     0,     0,    66,     0,    66,   108,   108,     0,     0,
     0,     0,     0,    73,    73,     0,    66,     0,     0,     0,
     0,    66,     0,    72,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    70,    70,     0,     0,     0,    70,
     0,     0,     0,    70,    70,    70,    70,    70,    73,     0,
    70,    70,     0,    70,    70,     0,    70,    70,    70,    70,
    70,    70,    70,    70,    70,    70,     0,    70,    70,    70,
    70,    70,    70,     0,     0,     0,    75,    75,     0,     0,
    73,    75,     0,     0,     0,    75,    75,    75,    75,    75,
    50,    50,    75,    75,     0,    75,    75,     0,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,     0,    75,
    75,    75,    75,    75,    75,     0,    71,    71,     0,     0,
     0,    71,     0,     0,     0,    71,    71,    71,    71,    71,
     0,     0,    71,    71,     0,    71,    71,     0,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,     0,    71,
    71,    71,    71,    71,    71,    72,    72,    53,    53,     0,
    72,     0,     0,     0,    72,    72,    72,    72,    72,     0,
     0,    72,    72,     0,    72,    72,     0,    72,    72,    72,
    72,    72,    72,    72,    72,    72,    72,     0,    72,    72,
    72,    72,    72,    72,     0,     0,     0,     0,     0,     0,
     0,    74,     0,     0,    74,     0,     0,     0,     0,     0,
     0,     0,    73,    73,     0,     0,     0,    73,    74,    74,
     0,    73,    73,    73,    73,    73,     0,     0,    73,    73,
     0,    73,    73,     0,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,     0,    73,    73,    73,    73,    73,
    73,    76,     0,    74,    76,     0,     0,     0,     0,     1,
     2,     0,     3,     0,   166,   167,     4,     0,    76,    76,
     5,     0,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,     0,     0,     0,    74,     0,     0,     0,     0,
    78,     0,     0,    78,    50,     0,     0,     0,    50,    50,
    50,    50,     0,    76,     0,    50,     0,    78,    78,    50,
     0,    50,    50,    50,    50,    50,    50,    50,    50,    50,
    50,     0,     0,    77,     0,     0,    77,     0,     0,     0,
     0,     0,     0,     0,     0,    76,     1,     2,    71,     3,
    77,    77,    78,     4,     0,     0,     0,     5,     0,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,     0,
     0,    53,     0,     0,     0,    53,    53,    53,    53,     0,
     0,     0,    53,     0,    78,    77,    53,     0,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    77,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    74,    74,     0,
     0,     0,    74,     0,     0,     0,    74,    74,    74,    74,
    74,     0,     0,    74,    74,     0,    74,    74,     0,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,     0,
    74,    74,    74,    74,    74,    74,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    76,    76,     0,
     0,     0,    76,     0,     0,     0,    76,    76,    76,    76,
    76,     0,     0,    76,    76,     0,    76,    76,     0,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    76,     0,
    76,    76,    76,    76,    76,    76,    78,    78,     0,     0,
     0,    78,     0,     0,     0,    78,    78,     0,    78,    78,
     0,     0,    78,    78,     0,    78,    78,     0,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,     0,    77,
    77,     0,    20,     0,    77,     0,    53,     0,    77,    77,
     0,    77,    77,     0,     0,    77,    77,    61,    77,    77,
    20,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,     0,     0,     0,    28,    20,     0,     0,     0,     0,
     0,     0,     1,     2,     0,     3,     0,     0,   189,     4,
     0,   190,    28,     5,    20,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,     0,     0,    28,     0,     0,
     0,     0,     0,     0,    20,     0,     1,     2,     0,     3,
     0,     0,   192,     4,     0,   193,    28,     5,     0,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,     0,
     0,     0,     0,     0,     1,     2,    28,     3,     0,    20,
   119,     4,    20,     0,     0,     5,     0,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
     2,    28,     3,     0,    28,   167,     4,     0,    20,     0,
     5,    20,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,     0,     0,     0,     0,     0,     0,    20,     0,
     0,     0,    20,     0,     0,     0,     0,     0,    20,     0,
    28,     0,    20,    28,    52,    20,    54,    20,    56,     0,
    20,     0,     0,     0,     0,     0,     0,     0,    20,     0,
    28,    20,     0,    20,    28,     0,     0,     0,     0,     0,
    28,     0,     0,     0,    28,     0,     0,    28,     0,    28,
     0,     0,    28,    75,    77,    80,     0,     0,     0,     0,
    28,     0,   104,    28,     0,    28,     0,     0,     0,     0,
     1,     2,     0,     3,     0,     0,     0,     4,     0,   116,
   117,     5,     0,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,     0,     0,     0,     0,     0,   129,   130,
   131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,   144,   145,     0,     0,     0,     0,   147,
   148,     0,     0,     0,   154,   155,   156,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   163,   164,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   178,     0,     0,     0,     0,     0,     0,
   182,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   195,
    }, yyCheck = {
//yyCheck 1879
    91,     0,    37,    38,    91,    44,    41,    42,    43,    44,
    45,    44,    47,    58,    59,    41,    37,    91,    44,    44,
    44,    42,    41,    58,    59,    44,    47,     2,    91,    44,
   125,    44,    58,    59,   266,   265,   266,   256,   196,    58,
    59,    37,    38,   201,   267,    41,    42,    43,    44,    45,
   267,    47,   284,   124,    93,   265,   266,   128,    93,    58,
    59,   265,    58,    59,    58,    59,   266,   266,    40,    37,
    38,    58,    59,    91,    42,    43,    40,    45,    93,    47,
    93,    37,    38,    44,   268,   268,    42,    43,    40,    45,
   125,    47,   125,    41,   265,    41,    44,    93,    44,    58,
   125,   125,    64,    58,    59,    58,    59,    41,    58,   279,
    44,    58,    59,   262,    58,    59,    58,    59,    58,    59,
    37,    38,   263,   269,   277,    42,    43,   288,    45,   125,
    47,   273,    44,    41,   180,   128,   111,   112,   165,    37,
    38,    58,    59,    -1,    42,    43,    -1,    45,    -1,    47,
    -1,    58,    59,    -1,    58,    59,    58,    59,    -1,    37,
    38,    58,    59,    -1,    42,    43,    -1,    45,    -1,    47,
   265,   266,    -1,    -1,    -1,    -1,    -1,   268,    37,    38,
    58,    59,    41,    42,    43,    -1,    45,    -1,    47,    -1,
    -1,    -1,    -1,    -1,   268,    -1,    58,    59,    37,    38,
    58,    59,   289,    42,    43,   268,    45,    -1,    47,    -1,
    -1,    -1,    -1,    -1,    -1,   289,    -1,   262,    -1,    -1,
    -1,    -1,   257,   258,    -1,    -1,   261,   262,    -1,    -1,
    -1,   266,   267,   268,   269,   270,   262,    -1,   273,   274,
   261,   276,   277,   262,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,    93,   290,   291,   292,   293,   294,
   295,   257,   258,   262,    -1,   261,   262,    -1,   262,    -1,
   266,   267,   268,   269,   270,   262,    -1,   273,   274,    -1,
   276,   277,    -1,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   261,   290,   291,   292,   293,   294,   295,
    -1,   257,   258,    40,    41,   261,    -1,   262,    -1,   262,
   266,   267,   268,   269,   270,   262,    -1,   273,   262,    -1,
   262,   277,   262,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,    -1,   290,   291,   292,   293,   294,   295,
   257,   258,    37,    38,   261,   262,    -1,    42,    43,    -1,
    45,   268,    47,    -1,    91,   262,    37,    38,   262,   276,
   262,    42,    43,   261,    45,   262,    47,    -1,    -1,    33,
   268,    -1,    -1,   290,   291,   292,   293,   294,   295,   257,
   258,    -1,    -1,   261,   262,    -1,   123,    -1,    -1,    -1,
   268,    -1,   290,   291,   292,   293,   294,   295,   257,   258,
   262,    -1,   261,    -1,   262,    -1,    -1,    -1,    -1,   268,
    40,    -1,   290,   291,   292,   293,   294,   295,   257,   258,
    38,    -1,   261,    41,    -1,    43,    44,    45,    19,   268,
    -1,   290,   291,   292,   293,   294,   295,    -1,    -1,    -1,
    58,    59,    -1,   107,    -1,    -1,   110,    -1,    -1,    -1,
    -1,   290,   291,   292,   293,   294,   295,    -1,    -1,    38,
    -1,    91,    41,    54,    43,    44,    45,    -1,    -1,    -1,
   266,   267,    -1,   269,    -1,    93,   272,   273,    -1,    58,
    59,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   123,    -1,    -1,    -1,    -1,    38,    -1,
    -1,    41,   166,    43,    44,    45,   170,   125,    -1,    -1,
    -1,    -1,   176,    -1,    93,    -1,    -1,    -1,    58,    59,
    -1,    -1,    -1,    -1,   188,    -1,   263,   264,   265,   266,
   267,    -1,    -1,    40,    -1,   199,    -1,    -1,    40,    41,
    -1,    -1,    -1,    40,    41,    -1,   125,   284,    -1,    -1,
    -1,    -1,    -1,    93,    -1,    -1,    -1,   148,    -1,   296,
   297,    -1,   257,   258,    -1,   156,   261,    -1,    -1,    -1,
    -1,    -1,    -1,   268,    -1,    -1,   257,   258,    -1,   274,
   261,    -1,    -1,    -1,    91,   125,    93,   268,    -1,    91,
    -1,   182,    -1,    -1,    91,   290,   291,   292,   293,   294,
   295,    -1,    40,    -1,   195,    -1,    -1,    -1,    -1,   290,
   291,   292,   293,   294,   295,    -1,   123,    -1,    -1,    -1,
    -1,   123,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
    -1,    -1,    -1,   263,   264,   265,   266,   267,    -1,   257,
   258,    40,    -1,    -1,   262,    -1,    -1,    -1,   266,   267,
   268,   269,   270,    91,   284,   273,   274,    -1,   276,   277,
    -1,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,    -1,   290,   291,   292,   293,   294,   295,   257,   258,
    -1,    -1,    -1,   262,    -1,   123,    -1,   266,   267,   268,
   269,   270,    91,    -1,   273,   274,    -1,   276,   277,    -1,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
    -1,   290,   291,   292,   293,   294,   295,   257,   258,    -1,
    40,    -1,   262,    -1,   123,    -1,   266,   267,   268,   269,
   270,    -1,    -1,   273,   274,    -1,   276,   277,    -1,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
   290,   291,   292,   293,   294,   295,   263,   264,   265,   266,
   267,   263,   264,   265,   266,   267,   263,   264,   265,   266,
   267,    91,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,
    -1,    -1,   284,    -1,    -1,    -1,    -1,   284,    41,   296,
   297,    44,    -1,    -1,   296,   297,    -1,    -1,    -1,   296,
   297,    -1,    -1,   123,    -1,    58,    59,    -1,    18,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   263,   264,   265,   266,   267,
    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    93,    -1,    52,    -1,    -1,    -1,   284,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
    -1,    -1,    72,    -1,   263,   264,   265,   266,   267,    -1,
    41,    -1,   125,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    -1,    -1,   284,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
    -1,    -1,    44,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    93,    -1,    -1,    -1,    58,    59,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   146,    -1,    -1,   149,
    -1,    -1,    -1,   263,   264,   265,   266,   267,    -1,    -1,
    -1,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
    -1,    93,    -1,    -1,   284,    -1,    41,    -1,    -1,    44,
   180,    -1,    -1,   183,    -1,   185,   296,   297,    -1,    -1,
    -1,    -1,    -1,    58,    59,    -1,   196,    -1,    -1,    -1,
    -1,   201,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,   262,
    -1,    -1,    -1,   266,   267,   268,   269,   270,    93,    -1,
   273,   274,    -1,   276,   277,    -1,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,    -1,   290,   291,   292,
   293,   294,   295,    -1,    -1,    -1,   257,   258,    -1,    -1,
   125,   262,    -1,    -1,    -1,   266,   267,   268,   269,   270,
    58,    59,   273,   274,    -1,   276,   277,    -1,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
   291,   292,   293,   294,   295,    -1,   257,   258,    -1,    -1,
    -1,   262,    -1,    -1,    -1,   266,   267,   268,   269,   270,
    -1,    -1,   273,   274,    -1,   276,   277,    -1,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,    -1,   290,
   291,   292,   293,   294,   295,   257,   258,    58,    59,    -1,
   262,    -1,    -1,    -1,   266,   267,   268,   269,   270,    -1,
    -1,   273,   274,    -1,   276,   277,    -1,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,    -1,   290,   291,
   292,   293,   294,   295,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   257,   258,    -1,    -1,    -1,   262,    58,    59,
    -1,   266,   267,   268,   269,   270,    -1,    -1,   273,   274,
    -1,   276,   277,    -1,   279,   280,   281,   282,   283,   284,
   285,   286,   287,   288,    -1,   290,   291,   292,   293,   294,
   295,    41,    -1,    93,    44,    -1,    -1,    -1,    -1,   266,
   267,    -1,   269,    -1,   271,   272,   273,    -1,    58,    59,
   277,    -1,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,    -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,
    41,    -1,    -1,    44,   262,    -1,    -1,    -1,   266,   267,
   268,   269,    -1,    93,    -1,   273,    -1,    58,    59,   277,
    -1,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   125,   266,   267,   268,   269,
    58,    59,    93,   273,    -1,    -1,    -1,   277,    -1,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
    -1,   262,    -1,    -1,    -1,   266,   267,   268,   269,    -1,
    -1,    -1,   273,    -1,   125,    93,   277,    -1,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
    -1,    -1,   262,    -1,    -1,    -1,   266,   267,   268,   269,
   270,    -1,    -1,   273,   274,    -1,   276,   277,    -1,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
   290,   291,   292,   293,   294,   295,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
    -1,    -1,   262,    -1,    -1,    -1,   266,   267,   268,   269,
   270,    -1,    -1,   273,   274,    -1,   276,   277,    -1,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
   290,   291,   292,   293,   294,   295,   257,   258,    -1,    -1,
    -1,   262,    -1,    -1,    -1,   266,   267,    -1,   269,   270,
    -1,    -1,   273,   274,    -1,   276,   277,    -1,   279,   280,
   281,   282,   283,   284,   285,   286,   287,   288,    -1,   257,
   258,    -1,     0,    -1,   262,    -1,     4,    -1,   266,   267,
    -1,   269,   270,    -1,    -1,   273,   274,    15,   276,   277,
    18,   279,   280,   281,   282,   283,   284,   285,   286,   287,
   288,    -1,    -1,    -1,     0,    33,    -1,    -1,    -1,    -1,
    -1,    -1,   266,   267,    -1,   269,    -1,    -1,   272,   273,
    -1,   275,    18,   277,    52,   279,   280,   281,   282,   283,
   284,   285,   286,   287,   288,    -1,    -1,    33,    -1,    -1,
    -1,    -1,    -1,    -1,    72,    -1,   266,   267,    -1,   269,
    -1,    -1,   272,   273,    -1,   275,    52,   277,    -1,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
    -1,    -1,    -1,    -1,   266,   267,    72,   269,    -1,   107,
   272,   273,   110,    -1,    -1,   277,    -1,   279,   280,   281,
   282,   283,   284,   285,   286,   287,   288,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
   267,   107,   269,    -1,   110,   272,   273,    -1,   146,    -1,
   277,   149,   279,   280,   281,   282,   283,   284,   285,   286,
   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,   166,    -1,
    -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,   176,    -1,
   146,    -1,   180,   149,     3,   183,     5,   185,     7,    -1,
   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
   166,   199,    -1,   201,   170,    -1,    -1,    -1,    -1,    -1,
   176,    -1,    -1,    -1,   180,    -1,    -1,   183,    -1,   185,
    -1,    -1,   188,    42,    43,    44,    -1,    -1,    -1,    -1,
   196,    -1,    51,   199,    -1,   201,    -1,    -1,    -1,    -1,
   266,   267,    -1,   269,    -1,    -1,    -1,   273,    -1,    68,
    69,   277,    -1,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,    -1,    -1,    -1,    -1,    -1,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,    -1,    -1,    -1,    -1,   108,
   109,    -1,    -1,    -1,   113,   114,   115,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,
   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   187,
    };

  /** maps symbol value to printable name.
      @see #yyExpecting
    */
  protected static final String[] yyNames = {
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,"'%'","'&'",
    null,"'('","')'","'*'","'+'","','","'-'",null,"'/'",null,null,null,
    null,null,null,null,null,null,null,"':'","';'",null,null,null,null,
    "'@'",null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "'['",null,"']'",null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,"'{'",null,"'}'",null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    "AND","OR","SHR","SHL","MOD","EOL","INT","NUM","STR","WORD","FUNC",
    "EQ","IF","THEN","ELSE","END","FOR","TO","NEXT","STEP","WHILE","WEND",
    "FUNCTION","RETURN","SUB","INCLUDE","DIM","IT","BREAK","CONTINUE",
    "CONST","FOREACH","IN","EQEQ","GT","GTEQ","LT","LTEQ","NOTEQ",
    "UMINUS","NOT",
    };

  /** printable rules for debugging.
    */
  protected static final String [] yyRule = {
    "$accept : program",
    "program : stmts",
    "stmts : stmt_eol",
    "stmts : stmts stmt_eol",
    "stmt_eol : stmt stmt_end",
    "stmt_eol : none stmt_end",
    "stmt : let_stmt",
    "stmt : func_stmt",
    "stmt : if_stmt",
    "stmt : for_stmt",
    "stmt : while_stmt",
    "stmt : def_func",
    "stmt : include_stmt",
    "stmt : foreach_stmt",
    "stmt : dim_stmt",
    "stmt : BREAK",
    "stmt : CONTINUE",
    "stmt : WORD error",
    "stmt : return_stmt",
    "return_stmt : RETURN",
    "return_stmt : RETURN expr",
    "dim_stmt : DIM WORD",
    "dim_stmt : DIM WORD EQ expr",
    "dim_stmt : CONST WORD EQ expr",
    "include_stmt : INCLUDE STR",
    "let_stmt : variable EQ expr",
    "func_stmt : callfunc",
    "func_stmt : callfunc2",
    "if_stmt : IF expr if_then stmts ELSE stmts if_end",
    "if_stmt : IF expr if_then stmts if_end",
    "if_then : THEN",
    "if_then : stmt_eol",
    "if_end : END",
    "if_end : END IF",
    "for_stmt : FOR variable EQ expr TO expr stmt_end stmts for_end",
    "for_stmt : FOR variable EQ expr TO expr STEP expr stmt_end stmts for_end",
    "for_end : END",
    "for_end : END FOR",
    "for_end : NEXT",
    "while_stmt : WHILE expr stmt_end stmts while_end",
    "while_end : END",
    "while_end : END WHILE",
    "while_end : WEND",
    "foreach_stmt : FOREACH variable IN expr stmt_end stmts foreach_end",
    "foreach_stmt : FOR variable IN expr stmt_end stmts for_end",
    "foreach_end : END",
    "foreach_end : END FOREACH",
    "foreach_end : NEXT",
    "def_func : def_func_head stmts def_func_end",
    "def_func : def_func_head EQ STR '@' INT",
    "def_func_head : FUNCTION FUNC",
    "def_func_head : FUNCTION FUNC '(' expr_list ')'",
    "def_func_head : FUNCTION FUNC '(' ')'",
    "def_func_head : SUB FUNC",
    "def_func_head : SUB FUNC '(' expr_list ')'",
    "def_func_head : SUB FUNC '(' ')'",
    "def_func_end : END",
    "def_func_end : END FUNCTION",
    "variable : WORD",
    "variable : IT",
    "variable : variable varparam",
    "varparam : '[' expr ']'",
    "expr : value",
    "expr : expr '*' expr",
    "expr : expr '/' expr",
    "expr : expr '%' expr",
    "expr : expr MOD expr",
    "expr : expr '+' expr",
    "expr : expr '-' expr",
    "expr : expr '&' expr",
    "expr : expr EQ expr",
    "expr : expr GT expr",
    "expr : expr GTEQ expr",
    "expr : expr LT expr",
    "expr : expr LTEQ expr",
    "expr : expr EQEQ expr",
    "expr : expr NOTEQ expr",
    "expr : expr OR expr",
    "expr : expr AND expr",
    "expr : NOT expr",
    "expr : UMINUS value",
    "value : NUM",
    "value : STR",
    "value : INT",
    "value : '(' expr ')'",
    "value : '[' array_list ']'",
    "value : '{' hash_list '}'",
    "value : '[' ']'",
    "value : '{' '}'",
    "value : variable",
    "value : callfunc",
    "array_list : expr",
    "array_list : array_list ',' eol_none expr",
    "hash_list : hash_pair",
    "hash_list : hash_list ',' eol_none hash_pair",
    "hash_pair : WORD ':' expr",
    "hash_pair : STR ':' expr",
    "expr_list : expr",
    "expr_list : expr_list ',' expr",
    "callfunc : FUNC '(' expr_list ')'",
    "callfunc : FUNC",
    "callfunc : FUNC '(' ')'",
    "callfunc2 : FUNC expr_list",
    "stmt_end : EOL",
    "stmt_end : ':'",
    "stmt_end : ';'",
    "eol_none : EOL",
    "eol_none : none",
    "none :",
    };

  /** debugging support, requires the package <tt>jay.yydebug</tt>.
      Set to <tt>null</tt> to suppress debugging messages.
    */
  protected jay.yydebug.yyDebug yydebug;

  /** index-checked interface to {@link #yyNames}.
      @param token single character or <tt>%token</tt> value.
      @return token name or <tt>[illegal]</tt> or <tt>[unknown]</tt>.
    */
  public static final String yyName (int token) {
    if (token < 0 || token > yyNames.length) return "[illegal]";
    String name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

  /** thrown for irrecoverable syntax errors and stack overflow.
      Nested for convenience, does not depend on parser class.
    */
  public static class yyException extends java.lang.Exception {
    public yyException (String message) {
      super(message);
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
      Nested for convenience, does not depend on parser class.
    */
  public interface yyInput {

    /** move on to next token.
        @return <tt>false</tt> if positioned beyond tokens.
        @throws IOException on input error.
      */
    boolean advance () throws java.io.IOException;

    /** classifies current token.
        Should not be called if {@link #advance()} returned <tt>false</tt>.
        @return current <tt>%token</tt> or single character.
      */
    int token ();

    /** associated with current token.
        Should not be called if {@link #advance()} returned <tt>false</tt>.
        @return value for {@link #token()}.
      */
    Object value ();
  }

  /** simplified error message.
      @see #yyerror(java.lang.String, java.lang.String[])
    */
  public void yyerror (String message) {
    yyerror(message, null);
  }

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected list of acceptable tokens, if available.
    */
  public void yyerror (String message, String[] expected) {
    if (expected != null && expected.length > 0) {
      System.err.print(message+", expecting");
      for (int n = 0; n < expected.length; ++ n)
        System.err.print(" "+expected[n]);
      System.err.println();
    } else
      System.err.println(message);
  }

  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected String[] yyExpecting (int state) {
    int token, n, len = 0;
    boolean[] ok = new boolean[yyNames.length];

    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           token < yyNames.length && n+token < yyTable.length; ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }

    String result[] = new String[len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = yyNames[token];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @param yydebug debug message writer implementing <tt>yyDebug</tt>, or <tt>null</tt>.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  public Object yyparse (yyInput yyLex, Object yydebug)
				throws java.io.IOException, yyException {
    this.yydebug = (jay.yydebug.yyDebug)yydebug;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of {@link #yyparse}.
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as <tt>$$ = yyDefault($1)</tt>, prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for <tt>$1</tt>, or <tt>null</tt>.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a dynamic state and value stack.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  public Object yyparse (yyInput yyLex) throws java.io.IOException, yyException {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0, yyStates[] = new int[yyMax];	// state stack
    Object yyVal = null, yyVals[] = new Object[yyMax];	// value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tokens to shift

    yyLoop: for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.length) {			// dynamically increase
        int[] i = new int[yyStates.length+yyMax];
        System.arraycopy(yyStates, 0, i, 0, yyStates.length);
        yyStates = i;
        Object[] o = new Object[yyVals.length+yyMax];
        System.arraycopy(yyVals, 0, o, 0, yyVals.length);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (yydebug != null) yydebug.push(yyState, yyVal);

      yyDiscarded: for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (yydebug != null)
              yydebug.lex(yyState, yyToken, yyName(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken) {
            if (yydebug != null)
              yydebug.shift(yyState, yyTable[yyN], yyErrorFlag > 0 ? yyErrorFlag-1 : 0);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            continue yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyerror("syntax error", yyExpecting(yyState));
              if (yydebug != null) yydebug.error("syntax error");
  
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += yyErrorCode) >= 0 && yyN < yyTable.length
                    && yyCheck[yyN] == yyErrorCode) {
                  if (yydebug != null)
                    yydebug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  continue yyLoop;
                }
                if (yydebug != null) yydebug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (yydebug != null) yydebug.reject();
              throw new yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (yydebug != null) yydebug.reject();
                throw new yyException("irrecoverable syntax error at end-of-file");
              }
              if (yydebug != null)
                yydebug.discard(yyState, yyToken, yyName(yyToken), yyLex.value());
              yyToken = -1;
              continue yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (yydebug != null)
          yydebug.reduce(yyState, yyStates[yyV-1], yyN, yyRule[yyN], yyLen[yyN]);
        yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
					// line 38 "BasicParser.jay"
  { topnode = ((ANode)yyVals[0+yyTop]); }
  break;
case 3:
					// line 41 "BasicParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 4:
					// line 43 "BasicParser.jay"
  { yyVal = nc.connect(((ANode)yyVals[-1+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 15:
					// line 55 "BasicParser.jay"
  { yyVal = new ANodeNop(nc.FLAG_BREAK);    }
  break;
case 16:
					// line 56 "BasicParser.jay"
  { yyVal = new ANodeNop(nc.FLAG_CONTINUE); }
  break;
case 17:
					// line 57 "BasicParser.jay"
  { yyVal = new ANodeNop("error"); nc.error(ErrMsg.UnknownWord + ":" + (String)((Token)yyVals[-1+yyTop]).value); }
  break;
case 19:
					// line 60 "BasicParser.jay"
  { yyVal = nc.return_node();   }
  break;
case 20:
					// line 61 "BasicParser.jay"
  { yyVal = nc.return_node(((ANode)yyVals[0+yyTop])); }
  break;
case 21:
					// line 63 "BasicParser.jay"
  { yyVal = nc.localvar(((Token)yyVals[0+yyTop]), null); }
  break;
case 22:
					// line 64 "BasicParser.jay"
  { yyVal = nc.localvar(((Token)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop]));   }
  break;
case 23:
					// line 65 "BasicParser.jay"
  { yyVal = new ANodeNop("const"); }
  break;
case 24:
					// line 67 "BasicParser.jay"
  { yyVal = new ANodeNop("include_stmt"); }
  break;
case 25:
					// line 69 "BasicParser.jay"
  { yyVal = nc.let(((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 26:
					// line 71 "BasicParser.jay"
  { yyVal = nc.addPOP(((ANode)yyVals[0+yyTop])); }
  break;
case 27:
					// line 72 "BasicParser.jay"
  { yyVal = nc.addPOP(((ANode)yyVals[0+yyTop])); }
  break;
case 28:
					// line 74 "BasicParser.jay"
  { yyVal = nc.if_node(((ANode)yyVals[-5+yyTop]), ((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[-1+yyTop]));   }
  break;
case 29:
					// line 75 "BasicParser.jay"
  { yyVal = nc.if_node(((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[-1+yyTop]), null); }
  break;
case 34:
					// line 83 "BasicParser.jay"
  {  yyVal = nc.for_basic(((ANode)yyVals[-7+yyTop]), ((ANode)yyVals[-5+yyTop]), ((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[-1+yyTop]),null); }
  break;
case 35:
					// line 86 "BasicParser.jay"
  {  yyVal = nc.for_basic(((ANode)yyVals[-9+yyTop]), ((ANode)yyVals[-7+yyTop]), ((ANode)yyVals[-5+yyTop]), ((ANode)yyVals[-3+yyTop]),null); }
  break;
case 39:
					// line 94 "BasicParser.jay"
  { yyVal = nc.while_node(((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[-1+yyTop])); }
  break;
case 43:
					// line 101 "BasicParser.jay"
  { yyVal = nc.foreach_node(((ANode)yyVals[-5+yyTop]), ((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[-1+yyTop])); }
  break;
case 44:
					// line 103 "BasicParser.jay"
  { yyVal = nc.foreach_node(((ANode)yyVals[-5+yyTop]), ((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[-1+yyTop])); }
  break;
case 48:
					// line 109 "BasicParser.jay"
  { yyVal = nc.registerFunc(((Token)yyVals[-2+yyTop]), ((ANode)yyVals[-1+yyTop])); }
  break;
case 49:
					// line 110 "BasicParser.jay"
  { yyVal = new ANodeNop("def_lib"); }
  break;
case 50:
					// line 112 "BasicParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[0+yyTop])); }
  break;
case 51:
					// line 113 "BasicParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[-3+yyTop])); }
  break;
case 52:
					// line 114 "BasicParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[-2+yyTop])); }
  break;
case 53:
					// line 115 "BasicParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[0+yyTop])); }
  break;
case 54:
					// line 116 "BasicParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[-3+yyTop])); }
  break;
case 55:
					// line 117 "BasicParser.jay"
  { yyVal = nc.registerFuncHeader(((Token)yyVals[-2+yyTop])); }
  break;
case 58:
					// line 122 "BasicParser.jay"
  { yyVal = nc.getVariable(((Token)yyVals[0+yyTop])); }
  break;
case 59:
					// line 123 "BasicParser.jay"
  { yyVal = nc.it(); }
  break;
case 60:
					// line 124 "BasicParser.jay"
  { yyVal = nc.getHash(((ANode)yyVals[-1+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 61:
					// line 126 "BasicParser.jay"
  { yyVal = ((ANode)yyVals[-1+yyTop]); }
  break;
case 63:
					// line 130 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.MUL,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 64:
					// line 131 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.DIV,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 65:
					// line 132 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.MOD,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 66:
					// line 133 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.MOD,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 67:
					// line 134 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.ADD,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 68:
					// line 135 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.SUB,  ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 69:
					// line 136 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.ADDSTR,((ANode)yyVals[-2+yyTop]),((ANode)yyVals[0+yyTop])); }
  break;
case 70:
					// line 137 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.EQEQ, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 71:
					// line 138 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.GT,   ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 72:
					// line 139 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.GTEQ, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 73:
					// line 140 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.LT,   ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 74:
					// line 141 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.LTEQ, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 75:
					// line 142 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.EQEQ, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 76:
					// line 143 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.NOTEQ,((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 77:
					// line 144 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.OR, ((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 78:
					// line 145 "BasicParser.jay"
  { yyVal = nc.expr(ANodeTypes.AND,((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 79:
					// line 146 "BasicParser.jay"
  { yyVal = nc.not(((ANode)yyVals[0+yyTop])); }
  break;
case 80:
					// line 147 "BasicParser.jay"
  { yyVal = nc.uminus(((ANode)yyVals[0+yyTop])); }
  break;
case 81:
					// line 149 "BasicParser.jay"
  { yyVal = nc.constNum(((Token)yyVals[0+yyTop])); }
  break;
case 82:
					// line 150 "BasicParser.jay"
  { yyVal = nc.constStr(((Token)yyVals[0+yyTop])); }
  break;
case 83:
					// line 151 "BasicParser.jay"
  { yyVal = nc.constInt(((Token)yyVals[0+yyTop])); }
  break;
case 84:
					// line 152 "BasicParser.jay"
  { yyVal = ((ANode)yyVals[-1+yyTop]); }
  break;
case 85:
					// line 153 "BasicParser.jay"
  { yyVal = nc.array_list_end(((ANode)yyVals[-1+yyTop])); }
  break;
case 86:
					// line 154 "BasicParser.jay"
  { yyVal = nc.hash_list_end(((ANode)yyVals[-1+yyTop])); }
  break;
case 87:
					// line 155 "BasicParser.jay"
  { yyVal = nc.constNull(); }
  break;
case 88:
					// line 156 "BasicParser.jay"
  { yyVal = nc.constNull(); }
  break;
case 91:
					// line 160 "BasicParser.jay"
  { yyVal = nc.array_list_begin(((ANode)yyVals[0+yyTop])); }
  break;
case 92:
					// line 161 "BasicParser.jay"
  { yyVal = nc.array_list_append(((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 93:
					// line 163 "BasicParser.jay"
  { yyVal = nc.hash_list_begin(((ANode)yyVals[0+yyTop])); }
  break;
case 94:
					// line 164 "BasicParser.jay"
  { yyVal = nc.hash_list_append(((ANode)yyVals[-3+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 95:
					// line 166 "BasicParser.jay"
  { yyVal = nc.hash_list_pair(((Token)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 96:
					// line 167 "BasicParser.jay"
  { yyVal = nc.hash_list_pair(((Token)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 97:
					// line 169 "BasicParser.jay"
  { yyVal = nc.expr_list_top(((ANode)yyVals[0+yyTop])); }
  break;
case 98:
					// line 170 "BasicParser.jay"
  { yyVal = nc.expr_list_next(((ANode)yyVals[-2+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 99:
					// line 173 "BasicParser.jay"
  { yyVal = nc.callFunc(((Token)yyVals[-3+yyTop]), ((ANode)yyVals[-1+yyTop]));  }
  break;
case 100:
					// line 174 "BasicParser.jay"
  { yyVal = nc.callFunc(((Token)yyVals[0+yyTop]),null); }
  break;
case 101:
					// line 175 "BasicParser.jay"
  { yyVal = nc.callFunc(((Token)yyVals[-2+yyTop]),null); }
  break;
case 102:
					// line 177 "BasicParser.jay"
  { yyVal = nc.callFunc(((Token)yyVals[-1+yyTop]), ((ANode)yyVals[0+yyTop])); }
  break;
case 103:
					// line 179 "BasicParser.jay"
  { yyVal = nc.EOL(((Token)yyVals[0+yyTop])); }
  break;
case 104:
					// line 180 "BasicParser.jay"
  { yyVal = new ANodeNop(":"); }
  break;
case 105:
					// line 181 "BasicParser.jay"
  { yyVal = new ANodeNop(";"); }
  break;
case 108:
					// line 186 "BasicParser.jay"
  { yyVal = new ANode(ANodeTypes.NOP); }
  break;
					// line 1224 "-"
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (yydebug != null) yydebug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (yydebug != null)
               yydebug.lex(yyState, yyToken,yyName(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (yydebug != null) yydebug.accept(yyVal);
            return yyVal;
          }
          continue yyLoop;
        }
        if ((yyN = yyGindex[yyM]) != 0 && (yyN += yyState) >= 0
            && yyN < yyTable.length && yyCheck[yyN] == yyState)
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (yydebug != null) yydebug.shift(yyStates[yyTop], yyState);
        continue yyLoop;
      }
    }
  }

					// line 188 "BasicParser.jay"

      
    public BasicParser(GlobalObject global) {
        super(global);
        nc = new BasicNodeCreator(this);
    }
    public Object parse(Scanner scanner) throws AOICException{
        try {
            
            return yyparse((BasicScanner)scanner);
            
        } catch (yyException e) {
            throw new AOICException(scanner.reportCur() + ":" + e);
        } catch (java.io.IOException e) {
            throw new AOICException(scanner.reportCur() + ":" + e);
        }
    }

}

					// line 1275 "-"
